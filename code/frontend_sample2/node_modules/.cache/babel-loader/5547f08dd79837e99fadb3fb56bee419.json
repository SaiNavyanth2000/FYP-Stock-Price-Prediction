{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nimport _imports_0 from '../../public/images/multi_lstm/prediction_demo.jpg';\nimport _imports_1 from '../.././public/images/multi_lstm/model_summary.jpg';\nconst _hoisted_1 = {\n  id: \"app\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<p> Multivariate LSTM (Long Short Term Memory) network has been trained with 7 timestamps. </p><p>So, this is how it splits the data:</p><img src=\\\"\" + _imports_0 + \"\\\"><p> Based on the past 7 days of data, the model will predict the closing price of the next day. </p><br><br><p> In mltivariate LSTM the prediction is based on multiple features. The features used to train our model are: </p><ul><li>High - Low (difference between the two)</li><li>Open - Close (difference between the two</li><li>5 day moving average</li><li>10 day moving average</li><li>20 day moving average</li><li>7 day standard deviation</li><li>RSI with 14 periods</li><li>8 day exponential moving average</li><li>21 day exponential moving average</li><li>34 day exponential moving average</li><li>55 day exponential moving average</li><li>Daily Returns (or) Percent change</li><li>Trading Volume</li></ul><br><p> Different models have been trained with different layers. After hyperparameter tuning, this is the best model for stock price data: </p><img src=\\\"\" + _imports_1 + \"\\\">\", 11);\n\nconst _hoisted_13 = {\n  class: \"table-wrapper-scroll-y my-custom-scrollbar mt-5\"\n};\nconst _hoisted_14 = {\n  key: 0,\n  class: \"table table-bordered table-striped\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_13, [Object.keys($props.stockdata).length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_14, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.keys(Object.values($props.stockdata)[0]), (key, index) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: index\n    }, _toDisplayString(key), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.values($props.stockdata), (key, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.values(key), (key2, index2) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: index2\n      }, _toDisplayString(parseFloat(key2).toFixed(2)), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":";OAOSA,gBAAwD;OA8BxDC,gBAAwD;;AApC1DC,IAAE,EAAC;;;;;;AAsCDC,OAAK,EAAC;;;;AAEPA,OAAK,EAAC;;;uBAxCZC,oBA8DM,KA9DN,cA8DM,CA7DJC,UA6DI,EAxBJC,oBAuBM,KAvBN,eAuBM,CApBIC,MAAM,CAACC,IAAP,CAAYC,gBAAZ,EAAuBC,MAAvB,GAA6B,mBAFrCN,oBAqBQ,OArBR,eAqBQ,CAjBNE,oBASQ,OATR,EASQ,IATR,EASQ,CARNA,oBAOK,IAPL,EAOK,IAPL,EAOK,oBANHF,oBAKKO,SALL,EAKK,IALL,EAKKC,YAJoBL,MAAM,CAACC,IAAP,CAAYD,MAAM,CAACM,MAAP,CAAcJ,gBAAd,EAAuB,CAAvB,CAAZ,CAIpB,EAJuD,CAAlDK,GAAkD,EAA7CC,KAA6C,KAAxC;yBADpBX,oBAKK,IALL,EAKK;AAHFU,SAAG,EAAEC;AAGH,KALL,EAEaC,iBAERF,GAFQ,CAFb,EAIQ;AAAA;AAJR;GAKK,CALL;;AAAA,GAMG,EAPL,CAQM,CATR,CAiBM,EAPNR,oBAMQ,OANR,EAMQ,IANR,EAMQ,oBALNF,oBAIKO,SAJL,EAIK,IAJL,EAIKC,YAJsBL,MAAM,CAACM,MAAP,CAAcJ,gBAAd,CAItB,EAJ6C,CAAtCK,GAAsC,EAAjCC,KAAiC,KAA5B;yBAAtBX,oBAIK,IAJL,EAIK;AAJiDU,SAAG,EAAEC;AAItD,KAJL,EAAgE,oBAC9DX,oBAEKO,SAFL,EAEK,IAFL,EAEKC,YAFwBL,MAAM,CAACM,MAAP,CAAcC,GAAd,CAExB,EAFyC,CAAlCG,IAAkC,EAA5BC,MAA4B,KAAtB;2BAAxBd,oBAEK,IAFL,EAEK;AAF6CU,WAAG,EAAEI;AAElD,OAFL,EAA6DF,iBACxDG,UAAU,CAACF,IAAD,CAAV,CAAiBG,OAAjB,CAAwB,CAAxB,CADwD,CAA7D,EAC6B;AAAA;AAD7B;KAEK,CAFL;;AAAA,KAD8D,EAAhE;GAIK,CAJL;;AAAA,GAKM,EANR,CAOM,CArBR,sCAsBI,CAvBN,CAwBI,CA9DN","names":["_imports_0","_imports_1","id","class","_createElementBlock","_hoisted_2","_createElementVNode","Object","keys","$props","length","_Fragment","_renderList","values","key","index","_toDisplayString","key2","index2","parseFloat","toFixed"],"sourceRoot":"","sources":["C:\\Users\\saina\\OneDrive - City University of Hong Kong\\Desktop\\cityu\\Cityu Year 4\\FYP\\code\\frontend_sample2\\src\\components\\MultiLstm.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <p>\n      Multivariate LSTM (Long Short Term Memory) network has been trained with\n      7 timestamps.\n    </p>\n    <p>So, this is how it splits the data:</p>\n    <img src=\"../../public/images/multi_lstm/prediction_demo.jpg\" />\n    <p>\n      Based on the past 7 days of data, the model will predict the closing\n      price of the next day.\n    </p>\n    <br /><br />\n    <p>\n      In mltivariate LSTM the prediction is based on multiple features. The\n      features used to train our model are:\n    </p>\n    <ul>\n      <li>High - Low (difference between the two)</li>\n      <li>Open - Close (difference between the two</li>\n      <li>5 day moving average</li>\n      <li>10 day moving average</li>\n      <li>20 day moving average</li>\n      <li>7 day standard deviation</li>\n      <li>RSI with 14 periods</li>\n      <li>8 day exponential moving average</li>\n      <li>21 day exponential moving average</li>\n      <li>34 day exponential moving average</li>\n      <li>55 day exponential moving average</li>\n      <li>Daily Returns (or) Percent change</li>\n      <li>Trading Volume</li>\n    </ul>\n    <br />\n    <p>\n      Different models have been trained with different layers. After\n      hyperparameter tuning, this is the best model for stock price data:\n    </p>\n    <img src=\"../.././public/images/multi_lstm/model_summary.jpg\" />\n\n    <div class=\"table-wrapper-scroll-y my-custom-scrollbar mt-5\">\n      <table\n        class=\"table table-bordered table-striped\"\n        v-if=\"Object.keys(stockdata).length > 0\"\n      >\n        <thead>\n          <tr>\n            <th\n              v-for=\"(key, index) in Object.keys(Object.values(stockdata)[0])\"\n              :key=\"index\"\n            >\n              {{ key }}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(key, index) in Object.values(stockdata)\" :key=\"index\">\n            <td v-for=\"(key2, index2) in Object.values(key)\" :key=\"index2\">\n              {{ parseFloat(key2).toFixed(2) }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    stockdata: Object,\n  },\n  data() {\n    return {};\n  },\n  created() {\n    // console.log(this.stockdata);\n    // console.log(Object.values(this.stockdata['Adj Close']));\n  },\n};\n</script>\n\n<style>\n.my-custom-scrollbar {\n  position: relative;\n  height: 20vh;\n  overflow: auto;\n}\n.my-custom-scrollbar thead th {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  background: #ffffff;\n}\n.table-wrapper-scroll-y {\n  display: block;\n}\ntable {\n  border: 'solid 10px black';\n}\nth {\n  background: #ffffff;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}