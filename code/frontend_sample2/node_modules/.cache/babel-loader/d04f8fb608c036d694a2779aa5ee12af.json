{"ast":null,"code":"import { h, ref, onUnmounted, Teleport } from 'vue';\nimport { noop } from '../../utils/event.js';\nimport { addFocusWaitFlag, removeFocusWaitFlag } from '../../utils/private/focus-manager.js';\nimport { createGlobalNode, removeGlobalNode } from '../../utils/private/global-nodes.js';\nimport { portalList } from '../../utils/private/portal.js';\n\nfunction isOnGlobalDialog(vm) {\n  vm = vm.parent;\n\n  while (vm !== void 0 && vm !== null) {\n    if (vm.type.name === 'QGlobalDialog') {\n      return true;\n    }\n\n    if (vm.type.name === 'QDialog' || vm.type.name === 'QMenu') {\n      return false;\n    }\n\n    vm = vm.parent;\n  }\n\n  return false;\n} // Warning!\n// You MUST specify \"inheritAttrs: false\" in your component\n\n\nexport default function (vm, innerRef, renderPortalContent, checkGlobalDialog) {\n  const portalIsActive = ref(false);\n\n  if (__QUASAR_SSR_SERVER__) {\n    return {\n      portalIsActive,\n      showPortal: noop,\n      hidePortal: noop,\n      renderPortal: noop\n    };\n  }\n\n  let portalEl = null;\n  const focusObj = {};\n  const onGlobalDialog = checkGlobalDialog === true && isOnGlobalDialog(vm);\n\n  function showPortal(isReady) {\n    if (isReady === true) {\n      removeFocusWaitFlag(focusObj);\n      return;\n    }\n\n    if (portalIsActive.value === false) {\n      if (onGlobalDialog === false && portalEl === null) {\n        portalEl = createGlobalNode();\n      }\n\n      portalIsActive.value = true; // register portal\n\n      portalList.push(vm.proxy);\n      addFocusWaitFlag(focusObj);\n    }\n  }\n\n  function hidePortal() {\n    removeFocusWaitFlag(focusObj);\n    portalIsActive.value = false; // unregister portal\n\n    const index = portalList.indexOf(vm.proxy);\n\n    if (index > -1) {\n      portalList.splice(index, 1);\n    }\n\n    if (portalEl !== null) {\n      removeGlobalNode(portalEl);\n      portalEl = null;\n    }\n  }\n\n  onUnmounted(hidePortal); // expose publicly needed stuff for portal utils\n\n  Object.assign(vm.proxy, {\n    __qPortalInnerRef: innerRef\n  });\n  return {\n    showPortal,\n    hidePortal,\n    portalIsActive,\n    renderPortal: () => onGlobalDialog === true ? renderPortalContent() : portalIsActive.value === true ? [h(Teleport, {\n      to: portalEl\n    }, renderPortalContent())] : void 0\n  };\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/composables/private/use-portal.js"],"names":["h","ref","onUnmounted","Teleport","noop","addFocusWaitFlag","removeFocusWaitFlag","createGlobalNode","removeGlobalNode","portalList","isOnGlobalDialog","vm","parent","type","name","innerRef","renderPortalContent","checkGlobalDialog","portalIsActive","__QUASAR_SSR_SERVER__","showPortal","hidePortal","renderPortal","portalEl","focusObj","onGlobalDialog","isReady","value","push","proxy","index","indexOf","splice","Object","assign","__qPortalInnerRef","to"],"mappings":"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","sourcesContent":["import { h, ref, onUnmounted, Teleport } from 'vue'\n\nimport { noop } from '../../utils/event.js'\nimport { addFocusWaitFlag, removeFocusWaitFlag } from '../../utils/private/focus-manager.js'\nimport { createGlobalNode, removeGlobalNode } from '../../utils/private/global-nodes.js'\nimport { portalList } from '../../utils/private/portal.js'\n\nfunction isOnGlobalDialog (vm) {\n  vm = vm.parent\n\n  while (vm !== void 0 && vm !== null) {\n    if (vm.type.name === 'QGlobalDialog') {\n      return true\n    }\n    if (vm.type.name === 'QDialog' || vm.type.name === 'QMenu') {\n      return false\n    }\n\n    vm = vm.parent\n  }\n\n  return false\n}\n\n// Warning!\n// You MUST specify \"inheritAttrs: false\" in your component\n\nexport default function (vm, innerRef, renderPortalContent, checkGlobalDialog) {\n  const portalIsActive = ref(false)\n\n  if (__QUASAR_SSR_SERVER__) {\n    return {\n      portalIsActive,\n\n      showPortal: noop,\n      hidePortal: noop,\n      renderPortal: noop\n    }\n  }\n\n  let portalEl = null\n  const focusObj = {}\n  const onGlobalDialog = checkGlobalDialog === true && isOnGlobalDialog(vm)\n\n  function showPortal (isReady) {\n    if (isReady === true) {\n      removeFocusWaitFlag(focusObj)\n      return\n    }\n\n    if (portalIsActive.value === false) {\n      if (onGlobalDialog === false && portalEl === null) {\n        portalEl = createGlobalNode()\n      }\n\n      portalIsActive.value = true\n\n      // register portal\n      portalList.push(vm.proxy)\n\n      addFocusWaitFlag(focusObj)\n    }\n  }\n\n  function hidePortal () {\n    removeFocusWaitFlag(focusObj)\n    portalIsActive.value = false\n\n    // unregister portal\n    const index = portalList.indexOf(vm.proxy)\n    if (index > -1) {\n      portalList.splice(index, 1)\n    }\n\n    if (portalEl !== null) {\n      removeGlobalNode(portalEl)\n      portalEl = null\n    }\n  }\n\n  onUnmounted(hidePortal)\n\n  // expose publicly needed stuff for portal utils\n  Object.assign(vm.proxy, { __qPortalInnerRef: innerRef })\n\n  return {\n    showPortal,\n    hidePortal,\n\n    portalIsActive,\n\n    renderPortal: () => (\n      onGlobalDialog === true\n        ? renderPortalContent()\n        : (\n            portalIsActive.value === true\n              ? [ h(Teleport, { to: portalEl }, renderPortalContent()) ]\n              : void 0\n          )\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}