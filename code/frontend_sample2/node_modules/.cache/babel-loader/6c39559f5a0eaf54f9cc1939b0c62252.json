{"ast":null,"code":"function fallback(text) {\n  const area = document.createElement('textarea');\n  area.value = text;\n  area.contentEditable = true;\n  area.style.position = 'fixed'; // avoid scrolling to bottom\n\n  document.body.appendChild(area);\n  area.focus();\n  area.select();\n  const res = document.execCommand('copy');\n  area.remove();\n  return res;\n}\n\nexport default function (text) {\n  return navigator.clipboard !== void 0 ? navigator.clipboard.writeText(text) : new Promise((resolve, reject) => {\n    const res = fallback(text);\n\n    if (res) {\n      resolve(true);\n    } else {\n      reject(res);\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/utils/copy-to-clipboard.js"],"names":["fallback","text","area","document","createElement","value","contentEditable","style","position","body","appendChild","focus","select","res","execCommand","remove","navigator","clipboard","writeText","Promise","resolve","reject"],"mappings":"AAAA,SAASA,QAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAb;AACAF,EAAAA,IAAI,CAACG,KAAL,GAAaJ,IAAb;AACAC,EAAAA,IAAI,CAACI,eAAL,GAAuB,IAAvB;AACAJ,EAAAA,IAAI,CAACK,KAAL,CAAWC,QAAX,GAAsB,OAAtB,CAJuB,CAIO;;AAE9BL,EAAAA,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BR,IAA1B;AACAA,EAAAA,IAAI,CAACS,KAAL;AACAT,EAAAA,IAAI,CAACU,MAAL;AAEA,QAAMC,GAAG,GAAGV,QAAQ,CAACW,WAAT,CAAqB,MAArB,CAAZ;AAEAZ,EAAAA,IAAI,CAACa,MAAL;AACA,SAAOF,GAAP;AACD;;AAED,eAAe,UAAUZ,IAAV,EAAgB;AAC7B,SAAOe,SAAS,CAACC,SAAV,KAAwB,KAAK,CAA7B,GACHD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BjB,IAA9B,CADG,GAEH,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjC,UAAMR,GAAG,GAAGb,QAAQ,CAACC,IAAD,CAApB;;AACA,QAAIY,GAAJ,EAAS;AACPO,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFD,MAGK;AACHC,MAAAA,MAAM,CAACR,GAAD,CAAN;AACD;AACF,GARC,CAFJ;AAWD","sourcesContent":["function fallback (text) {\n  const area = document.createElement('textarea')\n  area.value = text\n  area.contentEditable = true\n  area.style.position = 'fixed' // avoid scrolling to bottom\n\n  document.body.appendChild(area)\n  area.focus()\n  area.select()\n\n  const res = document.execCommand('copy')\n\n  area.remove()\n  return res\n}\n\nexport default function (text) {\n  return navigator.clipboard !== void 0\n    ? navigator.clipboard.writeText(text)\n    : new Promise((resolve, reject) => {\n      const res = fallback(text)\n      if (res) {\n        resolve(true)\n      }\n      else {\n        reject(res)\n      }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}