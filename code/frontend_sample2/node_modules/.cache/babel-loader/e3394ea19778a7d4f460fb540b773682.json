{"ast":null,"code":"const hasMap = typeof Map === 'function',\n      hasSet = typeof Set === 'function',\n      hasArrayBuffer = typeof ArrayBuffer === 'function';\nexport function isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a !== null && b !== null && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    let length, i;\n\n    if (a.constructor === Array) {\n      length = a.length;\n\n      if (length !== b.length) {\n        return false;\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (isDeepEqual(a[i], b[i]) !== true) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (hasMap === true && a.constructor === Map) {\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      i = a.entries().next();\n\n      while (i.done !== true) {\n        if (b.has(i.value[0]) !== true) {\n          return false;\n        }\n\n        i = i.next();\n      }\n\n      i = a.entries().next();\n\n      while (i.done !== true) {\n        if (isDeepEqual(i.value[1], b.get(i.value[0])) !== true) {\n          return false;\n        }\n\n        i = i.next();\n      }\n\n      return true;\n    }\n\n    if (hasSet === true && a.constructor === Set) {\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      i = a.entries().next();\n\n      while (i.done !== true) {\n        if (b.has(i.value[0]) !== true) {\n          return false;\n        }\n\n        i = i.next();\n      }\n\n      return true;\n    }\n\n    if (hasArrayBuffer === true && a.buffer != null && a.buffer.constructor === ArrayBuffer) {\n      length = a.length;\n\n      if (length !== b.length) {\n        return false;\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf();\n    }\n\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString();\n    }\n\n    const keys = Object.keys(a).filter(key => a[key] !== void 0);\n    length = keys.length;\n\n    if (length !== Object.keys(b).filter(key => b[key] !== void 0).length) {\n      return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n\n      if (isDeepEqual(a[key], b[key]) !== true) {\n        return false;\n      }\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n\n\n  return a !== a && b !== b; // eslint-disable-line no-self-compare\n} // not perfect, but what we ARE interested is for Arrays not to slip in\n// as spread operator will mess things up in various areas\n\nexport function isObject(v) {\n  return v !== null && typeof v === 'object' && Array.isArray(v) !== true;\n}\nexport function isDate(v) {\n  return Object.prototype.toString.call(v) === '[object Date]';\n}\nexport function isRegexp(v) {\n  return Object.prototype.toString.call(v) === '[object RegExp]';\n}\nexport function isNumber(v) {\n  return typeof v === 'number' && isFinite(v);\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/utils/private/is.js"],"names":["hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","isDeepEqual","a","b","constructor","length","i","Array","size","entries","next","done","has","value","get","buffer","RegExp","source","flags","valueOf","Object","prototype","toString","keys","filter","key","isObject","v","isArray","isDate","call","isRegexp","isNumber","isFinite"],"mappings":"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","sourcesContent":["const\n  hasMap = typeof Map === 'function',\n  hasSet = typeof Set === 'function',\n  hasArrayBuffer = typeof ArrayBuffer === 'function'\n\nexport function isDeepEqual (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a !== null && b !== null && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false\n    }\n\n    let length, i\n\n    if (a.constructor === Array) {\n      length = a.length\n\n      if (length !== b.length) {\n        return false\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (isDeepEqual(a[ i ], b[ i ]) !== true) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (hasMap === true && a.constructor === Map) {\n      if (a.size !== b.size) {\n        return false\n      }\n\n      i = a.entries().next()\n      while (i.done !== true) {\n        if (b.has(i.value[ 0 ]) !== true) {\n          return false\n        }\n        i = i.next()\n      }\n\n      i = a.entries().next()\n      while (i.done !== true) {\n        if (isDeepEqual(i.value[ 1 ], b.get(i.value[ 0 ])) !== true) {\n          return false\n        }\n        i = i.next()\n      }\n\n      return true\n    }\n\n    if (hasSet === true && a.constructor === Set) {\n      if (a.size !== b.size) {\n        return false\n      }\n\n      i = a.entries().next()\n      while (i.done !== true) {\n        if (b.has(i.value[ 0 ]) !== true) {\n          return false\n        }\n        i = i.next()\n      }\n\n      return true\n    }\n\n    if (hasArrayBuffer === true && a.buffer != null && a.buffer.constructor === ArrayBuffer) {\n      length = a.length\n\n      if (length !== b.length) {\n        return false\n      }\n\n      for (i = length; i-- !== 0;) {\n        if (a[ i ] !== b[ i ]) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf()\n    }\n\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString()\n    }\n\n    const keys = Object.keys(a).filter(key => a[ key ] !== void 0)\n    length = keys.length\n\n    if (length !== Object.keys(b).filter(key => b[ key ] !== void 0).length) {\n      return false\n    }\n\n    for (i = length; i-- !== 0;) {\n      const key = keys[ i ]\n      if (isDeepEqual(a[ key ], b[ key ]) !== true) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  return a !== a && b !== b // eslint-disable-line no-self-compare\n}\n\n// not perfect, but what we ARE interested is for Arrays not to slip in\n// as spread operator will mess things up in various areas\nexport function isObject (v) {\n  return v !== null && typeof v === 'object' && Array.isArray(v) !== true\n}\n\nexport function isDate (v) {\n  return Object.prototype.toString.call(v) === '[object Date]'\n}\n\nexport function isRegexp (v) {\n  return Object.prototype.toString.call(v) === '[object RegExp]'\n}\n\nexport function isNumber (v) {\n  return typeof v === 'number' && isFinite(v)\n}\n"]},"metadata":{},"sourceType":"module"}