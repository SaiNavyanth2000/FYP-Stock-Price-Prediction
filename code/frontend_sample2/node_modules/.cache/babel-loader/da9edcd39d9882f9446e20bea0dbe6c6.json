{"ast":null,"code":"import { h, withDirectives } from 'vue';\nexport function hSlot(slot, otherwise) {\n  return slot !== void 0 ? slot() || otherwise : otherwise;\n}\nexport function hUniqueSlot(slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot();\n\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice();\n    }\n  }\n\n  return otherwise;\n}\n/**\n * Source definitely exists,\n * so it's merged with the possible slot\n */\n\nexport function hMergeSlot(slot, source) {\n  return slot !== void 0 ? source.concat(slot()) : source;\n}\n/**\n * Merge with possible slot,\n * even if source might not exist\n */\n\nexport function hMergeSlotSafely(slot, source) {\n  if (slot === void 0) {\n    return source;\n  }\n\n  return source !== void 0 ? source.concat(slot()) : slot();\n}\n/*\n * (String)  key       - unique vnode key\n * (Boolean) condition - should change ONLY when adding/removing directive\n */\n\nexport function hDir(tag, data, children, key, condition, getDirsFn) {\n  data.key = key + condition;\n  const vnode = h(tag, data, children);\n  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode;\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/utils/private/render.js"],"names":["h","withDirectives","hSlot","slot","otherwise","hUniqueSlot","vnode","slice","hMergeSlot","source","concat","hMergeSlotSafely","hDir","tag","data","children","key","condition","getDirsFn"],"mappings":"AAAA,SAASA,CAAT,EAAYC,cAAZ,QAAkC,KAAlC;AAEA,OAAO,SAASC,KAAT,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiC;AACtC,SAAOD,IAAI,KAAK,KAAK,CAAd,GACHA,IAAI,MAAMC,SADP,GAEHA,SAFJ;AAGD;AAED,OAAO,SAASC,WAAT,CAAsBF,IAAtB,EAA4BC,SAA5B,EAAuC;AAC5C,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnB,UAAMG,KAAK,GAAGH,IAAI,EAAlB;;AACA,QAAIG,KAAK,KAAK,KAAK,CAAf,IAAoBA,KAAK,KAAK,IAAlC,EAAwC;AACtC,aAAOA,KAAK,CAACC,KAAN,EAAP;AACD;AACF;;AAED,SAAOH,SAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,UAAT,CAAqBL,IAArB,EAA2BM,MAA3B,EAAmC;AACxC,SAAON,IAAI,KAAK,KAAK,CAAd,GACHM,MAAM,CAACC,MAAP,CAAcP,IAAI,EAAlB,CADG,GAEHM,MAFJ;AAGD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA2BR,IAA3B,EAAiCM,MAAjC,EAAyC;AAC9C,MAAIN,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnB,WAAOM,MAAP;AACD;;AAED,SAAOA,MAAM,KAAK,KAAK,CAAhB,GACHA,MAAM,CAACC,MAAP,CAAcP,IAAI,EAAlB,CADG,GAEHA,IAAI,EAFR;AAGD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASS,IAAT,CACLC,GADK,EAELC,IAFK,EAGLC,QAHK,EAILC,GAJK,EAKLC,SALK,EAMLC,SANK,EAOL;AACAJ,EAAAA,IAAI,CAACE,GAAL,GAAWA,GAAG,GAAGC,SAAjB;AAEA,QAAMX,KAAK,GAAGN,CAAC,CAACa,GAAD,EAAMC,IAAN,EAAYC,QAAZ,CAAf;AAEA,SAAOE,SAAS,KAAK,IAAd,GACHhB,cAAc,CAACK,KAAD,EAAQY,SAAS,EAAjB,CADX,GAEHZ,KAFJ;AAGD","sourcesContent":["import { h, withDirectives } from 'vue'\n\nexport function hSlot (slot, otherwise) {\n  return slot !== void 0\n    ? slot() || otherwise\n    : otherwise\n}\n\nexport function hUniqueSlot (slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot()\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice()\n    }\n  }\n\n  return otherwise\n}\n\n/**\n * Source definitely exists,\n * so it's merged with the possible slot\n */\nexport function hMergeSlot (slot, source) {\n  return slot !== void 0\n    ? source.concat(slot())\n    : source\n}\n\n/**\n * Merge with possible slot,\n * even if source might not exist\n */\nexport function hMergeSlotSafely (slot, source) {\n  if (slot === void 0) {\n    return source\n  }\n\n  return source !== void 0\n    ? source.concat(slot())\n    : slot()\n}\n\n/*\n * (String)  key       - unique vnode key\n * (Boolean) condition - should change ONLY when adding/removing directive\n */\nexport function hDir (\n  tag,\n  data,\n  children,\n  key,\n  condition,\n  getDirsFn\n) {\n  data.key = key + condition\n\n  const vnode = h(tag, data, children)\n\n  return condition === true\n    ? withDirectives(vnode, getDirsFn())\n    : vnode\n}\n"]},"metadata":{},"sourceType":"module"}