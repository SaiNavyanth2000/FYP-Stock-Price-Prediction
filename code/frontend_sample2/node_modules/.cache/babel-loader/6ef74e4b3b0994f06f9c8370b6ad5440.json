{"ast":null,"code":"import { h, ref, computed, getCurrentInstance } from 'vue';\nimport { stop, stopAndPrevent } from '../../utils/event.js';\n\nfunction filterFiles(files, rejectedFiles, failedPropValidation, filterFn) {\n  const acceptedFiles = [];\n  files.forEach(file => {\n    if (filterFn(file) === true) {\n      acceptedFiles.push(file);\n    } else {\n      rejectedFiles.push({\n        failedPropValidation,\n        file\n      });\n    }\n  });\n  return acceptedFiles;\n}\n\nfunction stopAndPreventDrag(e) {\n  e && e.dataTransfer && (e.dataTransfer.dropEffect = 'copy');\n  stopAndPrevent(e);\n}\n\nexport const useFileProps = {\n  multiple: Boolean,\n  accept: String,\n  capture: String,\n  maxFileSize: [Number, String],\n  maxTotalSize: [Number, String],\n  maxFiles: [Number, String],\n  filter: Function\n};\nexport const useFileEmits = ['rejected'];\nexport default function ({\n  editable,\n  dnd,\n  getFileInput,\n  addFilesToQueue\n}) {\n  const {\n    props,\n    emit,\n    proxy\n  } = getCurrentInstance();\n  const dndRef = ref(null);\n  const extensions = computed(() => props.accept !== void 0 ? props.accept.split(',').map(ext => {\n    ext = ext.trim();\n\n    if (ext === '*') {\n      // support \"*\"\n      return '*/';\n    } else if (ext.endsWith('/*')) {\n      // support \"image/*\" or \"*/*\"\n      ext = ext.slice(0, ext.length - 1);\n    }\n\n    return ext.toUpperCase();\n  }) : null);\n  const maxFilesNumber = computed(() => parseInt(props.maxFiles, 10));\n  const maxTotalSizeNumber = computed(() => parseInt(props.maxTotalSize, 10));\n\n  function pickFiles(e) {\n    if (editable.value) {\n      if (e !== Object(e)) {\n        e = {\n          target: null\n        };\n      }\n\n      if (e.target !== null && e.target.matches('input[type=\"file\"]') === true) {\n        // stop propagation if it's not a real pointer event\n        e.clientX === 0 && e.clientY === 0 && stop(e);\n      } else {\n        const input = getFileInput();\n        input && input !== e.target && input.click(e);\n      }\n    }\n  }\n\n  function addFiles(files) {\n    if (editable.value && files) {\n      addFilesToQueue(null, files);\n    }\n  }\n\n  function processFiles(e, filesToProcess, currentFileList, append) {\n    let files = Array.from(filesToProcess || e.target.files);\n    const rejectedFiles = [];\n\n    const done = () => {\n      if (rejectedFiles.length > 0) {\n        emit('rejected', rejectedFiles);\n      }\n    }; // filter file types\n\n\n    if (props.accept !== void 0 && extensions.value.indexOf('*/') === -1) {\n      files = filterFiles(files, rejectedFiles, 'accept', file => {\n        return extensions.value.some(ext => file.type.toUpperCase().startsWith(ext) || file.name.toUpperCase().endsWith(ext));\n      });\n\n      if (files.length === 0) {\n        return done();\n      }\n    } // filter max file size\n\n\n    if (props.maxFileSize !== void 0) {\n      const maxFileSize = parseInt(props.maxFileSize, 10);\n      files = filterFiles(files, rejectedFiles, 'max-file-size', file => {\n        return file.size <= maxFileSize;\n      });\n\n      if (files.length === 0) {\n        return done();\n      }\n    } // Cordova/iOS allows selecting multiple files even when the\n    // multiple attribute is not specified. We also normalize drag'n'dropped\n    // files here:\n\n\n    if (props.multiple !== true && files.length > 0) {\n      files = [files[0]];\n    } // Compute key to use for each file\n\n\n    files.forEach(file => {\n      file.__key = file.webkitRelativePath + file.lastModified + file.name + file.size;\n    }); // Avoid duplicate files\n\n    const filenameMap = currentFileList.map(entry => entry.__key);\n    files = filterFiles(files, rejectedFiles, 'duplicate', file => {\n      return filenameMap.includes(file.__key) === false;\n    });\n\n    if (files.length === 0) {\n      return done();\n    }\n\n    if (props.maxTotalSize !== void 0) {\n      let size = append === true ? currentFileList.reduce((total, file) => total + file.size, 0) : 0;\n      files = filterFiles(files, rejectedFiles, 'max-total-size', file => {\n        size += file.size;\n        return size <= maxTotalSizeNumber.value;\n      });\n\n      if (files.length === 0) {\n        return done();\n      }\n    } // do we have custom filter function?\n\n\n    if (typeof props.filter === 'function') {\n      const filteredFiles = props.filter(files);\n      files = filterFiles(files, rejectedFiles, 'filter', file => {\n        return filteredFiles.includes(file);\n      });\n    }\n\n    if (props.maxFiles !== void 0) {\n      let filesNumber = append === true ? currentFileList.length : 0;\n      files = filterFiles(files, rejectedFiles, 'max-files', () => {\n        filesNumber++;\n        return filesNumber <= maxFilesNumber.value;\n      });\n\n      if (files.length === 0) {\n        return done();\n      }\n    }\n\n    done();\n\n    if (files.length > 0) {\n      return files;\n    }\n  }\n\n  function onDragover(e) {\n    stopAndPreventDrag(e);\n    dnd.value !== true && (dnd.value = true);\n  }\n\n  function onDragleave(e) {\n    stopAndPrevent(e);\n    e.relatedTarget !== dndRef.value && (dnd.value = false);\n  }\n\n  function onDrop(e) {\n    stopAndPreventDrag(e);\n    const files = e.dataTransfer.files;\n\n    if (files.length > 0) {\n      addFilesToQueue(null, files);\n    }\n\n    dnd.value = false;\n  }\n\n  function getDndNode(type) {\n    if (dnd.value === true) {\n      return h('div', {\n        ref: dndRef,\n        class: `q-${type}__dnd absolute-full`,\n        onDragenter: stopAndPreventDrag,\n        onDragover: stopAndPreventDrag,\n        onDragleave,\n        onDrop\n      });\n    }\n  } // expose public methods\n\n\n  Object.assign(proxy, {\n    pickFiles,\n    addFiles\n  });\n  return {\n    pickFiles,\n    addFiles,\n    onDragover,\n    processFiles,\n    getDndNode,\n    maxFilesNumber,\n    maxTotalSizeNumber\n  };\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/composables/private/use-file.js"],"names":["h","ref","computed","getCurrentInstance","stop","stopAndPrevent","filterFiles","files","rejectedFiles","failedPropValidation","filterFn","acceptedFiles","forEach","file","push","stopAndPreventDrag","e","dataTransfer","dropEffect","useFileProps","multiple","Boolean","accept","String","capture","maxFileSize","Number","maxTotalSize","maxFiles","filter","Function","useFileEmits","editable","dnd","getFileInput","addFilesToQueue","props","emit","proxy","dndRef","extensions","split","map","ext","trim","endsWith","slice","length","toUpperCase","maxFilesNumber","parseInt","maxTotalSizeNumber","pickFiles","value","Object","target","matches","clientX","clientY","input","click","addFiles","processFiles","filesToProcess","currentFileList","append","Array","from","done","indexOf","some","type","startsWith","name","size","__key","webkitRelativePath","lastModified","filenameMap","entry","includes","reduce","total","filteredFiles","filesNumber","onDragover","onDragleave","relatedTarget","onDrop","getDndNode","class","onDragenter","assign"],"mappings":"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","sourcesContent":["import { h, ref, computed, getCurrentInstance } from 'vue'\n\nimport { stop, stopAndPrevent } from '../../utils/event.js'\n\nfunction filterFiles (files, rejectedFiles, failedPropValidation, filterFn) {\n  const acceptedFiles = []\n\n  files.forEach(file => {\n    if (filterFn(file) === true) {\n      acceptedFiles.push(file)\n    }\n    else {\n      rejectedFiles.push({ failedPropValidation, file })\n    }\n  })\n\n  return acceptedFiles\n}\n\nfunction stopAndPreventDrag (e) {\n  e && e.dataTransfer && (e.dataTransfer.dropEffect = 'copy')\n  stopAndPrevent(e)\n}\n\nexport const useFileProps = {\n  multiple: Boolean,\n  accept: String,\n  capture: String,\n  maxFileSize: [ Number, String ],\n  maxTotalSize: [ Number, String ],\n  maxFiles: [ Number, String ],\n  filter: Function\n}\n\nexport const useFileEmits = [ 'rejected' ]\n\nexport default function ({\n  editable,\n  dnd,\n  getFileInput,\n  addFilesToQueue\n}) {\n  const { props, emit, proxy } = getCurrentInstance()\n\n  const dndRef = ref(null)\n\n  const extensions = computed(() => (\n    props.accept !== void 0\n      ? props.accept.split(',').map(ext => {\n        ext = ext.trim()\n        if (ext === '*') { // support \"*\"\n          return '*/'\n        }\n        else if (ext.endsWith('/*')) { // support \"image/*\" or \"*/*\"\n          ext = ext.slice(0, ext.length - 1)\n        }\n        return ext.toUpperCase()\n      })\n      : null\n  ))\n\n  const maxFilesNumber = computed(() => parseInt(props.maxFiles, 10))\n  const maxTotalSizeNumber = computed(() => parseInt(props.maxTotalSize, 10))\n\n  function pickFiles (e) {\n    if (editable.value) {\n      if (e !== Object(e)) {\n        e = { target: null }\n      }\n\n      if (e.target !== null && e.target.matches('input[type=\"file\"]') === true) {\n        // stop propagation if it's not a real pointer event\n        e.clientX === 0 && e.clientY === 0 && stop(e)\n      }\n      else {\n        const input = getFileInput()\n        input && input !== e.target && input.click(e)\n      }\n    }\n  }\n\n  function addFiles (files) {\n    if (editable.value && files) {\n      addFilesToQueue(null, files)\n    }\n  }\n\n  function processFiles (e, filesToProcess, currentFileList, append) {\n    let files = Array.from(filesToProcess || e.target.files)\n    const rejectedFiles = []\n\n    const done = () => {\n      if (rejectedFiles.length > 0) {\n        emit('rejected', rejectedFiles)\n      }\n    }\n\n    // filter file types\n    if (props.accept !== void 0 && extensions.value.indexOf('*/') === -1) {\n      files = filterFiles(files, rejectedFiles, 'accept', file => {\n        return extensions.value.some(ext => (\n          file.type.toUpperCase().startsWith(ext)\n          || file.name.toUpperCase().endsWith(ext)\n        ))\n      })\n\n      if (files.length === 0) { return done() }\n    }\n\n    // filter max file size\n    if (props.maxFileSize !== void 0) {\n      const maxFileSize = parseInt(props.maxFileSize, 10)\n      files = filterFiles(files, rejectedFiles, 'max-file-size', file => {\n        return file.size <= maxFileSize\n      })\n\n      if (files.length === 0) { return done() }\n    }\n\n    // Cordova/iOS allows selecting multiple files even when the\n    // multiple attribute is not specified. We also normalize drag'n'dropped\n    // files here:\n    if (props.multiple !== true && files.length > 0) {\n      files = [ files[ 0 ] ]\n    }\n\n    // Compute key to use for each file\n    files.forEach(file => {\n      file.__key = file.webkitRelativePath + file.lastModified + file.name + file.size\n    })\n\n    // Avoid duplicate files\n    const filenameMap = currentFileList.map(entry => entry.__key)\n    files = filterFiles(files, rejectedFiles, 'duplicate', file => {\n      return filenameMap.includes(file.__key) === false\n    })\n\n    if (files.length === 0) { return done() }\n\n    if (props.maxTotalSize !== void 0) {\n      let size = append === true\n        ? currentFileList.reduce((total, file) => total + file.size, 0)\n        : 0\n\n      files = filterFiles(files, rejectedFiles, 'max-total-size', file => {\n        size += file.size\n        return size <= maxTotalSizeNumber.value\n      })\n\n      if (files.length === 0) { return done() }\n    }\n\n    // do we have custom filter function?\n    if (typeof props.filter === 'function') {\n      const filteredFiles = props.filter(files)\n      files = filterFiles(files, rejectedFiles, 'filter', file => {\n        return filteredFiles.includes(file)\n      })\n    }\n\n    if (props.maxFiles !== void 0) {\n      let filesNumber = append === true\n        ? currentFileList.length\n        : 0\n\n      files = filterFiles(files, rejectedFiles, 'max-files', () => {\n        filesNumber++\n        return filesNumber <= maxFilesNumber.value\n      })\n\n      if (files.length === 0) { return done() }\n    }\n\n    done()\n\n    if (files.length > 0) {\n      return files\n    }\n  }\n\n  function onDragover (e) {\n    stopAndPreventDrag(e)\n    dnd.value !== true && (dnd.value = true)\n  }\n\n  function onDragleave (e) {\n    stopAndPrevent(e)\n    e.relatedTarget !== dndRef.value && (dnd.value = false)\n  }\n\n  function onDrop (e) {\n    stopAndPreventDrag(e)\n    const files = e.dataTransfer.files\n\n    if (files.length > 0) {\n      addFilesToQueue(null, files)\n    }\n\n    dnd.value = false\n  }\n\n  function getDndNode (type) {\n    if (dnd.value === true) {\n      return h('div', {\n        ref: dndRef,\n        class: `q-${ type }__dnd absolute-full`,\n        onDragenter: stopAndPreventDrag,\n        onDragover: stopAndPreventDrag,\n        onDragleave,\n        onDrop\n      })\n    }\n  }\n\n  // expose public methods\n  Object.assign(proxy, { pickFiles, addFiles })\n\n  return {\n    pickFiles,\n    addFiles,\n    onDragover,\n    processFiles,\n    getDndNode,\n    maxFilesNumber,\n    maxTotalSizeNumber\n  }\n}\n"]},"metadata":{},"sourceType":"module"}