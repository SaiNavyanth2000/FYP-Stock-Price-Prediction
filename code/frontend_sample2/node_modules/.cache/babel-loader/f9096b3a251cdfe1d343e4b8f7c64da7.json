{"ast":null,"code":"import { inject, watch, onBeforeUnmount, getCurrentInstance } from 'vue';\nimport { formKey } from '../utils/private/symbols.js';\nexport default function ({\n  validate,\n  resetValidation,\n  requiresQForm\n}) {\n  const $form = inject(formKey, false);\n\n  if ($form !== false) {\n    const {\n      props,\n      proxy\n    } = getCurrentInstance(); // export public method (so it can be used in QForm)\n\n    Object.assign(proxy, {\n      validate,\n      resetValidation\n    });\n    watch(() => props.disable, val => {\n      if (val === true) {\n        typeof resetValidation === 'function' && resetValidation();\n        $form.unbindComponent(proxy);\n      } else {\n        $form.bindComponent(proxy);\n      }\n    }); // register component to parent QForm\n\n    props.disable !== true && $form.bindComponent(proxy);\n    onBeforeUnmount(() => {\n      // unregister component\n      props.disable !== true && $form.unbindComponent(proxy);\n    });\n  } else if (requiresQForm === true) {\n    console.error('Parent QForm not found on useFormChild()!');\n  }\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/composables/use-form-child.js"],"names":["inject","watch","onBeforeUnmount","getCurrentInstance","formKey","validate","resetValidation","requiresQForm","$form","props","proxy","Object","assign","disable","val","unbindComponent","bindComponent","console","error"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,eAAxB,EAAyCC,kBAAzC,QAAmE,KAAnE;AAEA,SAASC,OAAT,QAAwB,6BAAxB;AAEA,eAAe,UAAU;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,eAAZ;AAA6BC,EAAAA;AAA7B,CAAV,EAAwD;AACrE,QAAMC,KAAK,GAAGR,MAAM,CAACI,OAAD,EAAU,KAAV,CAApB;;AAEA,MAAII,KAAK,KAAK,KAAd,EAAqB;AACnB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBP,kBAAkB,EAA3C,CADmB,CAGnB;;AACAQ,IAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAArB;AAEAL,IAAAA,KAAK,CAAC,MAAMQ,KAAK,CAACI,OAAb,EAAsBC,GAAG,IAAI;AAChC,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,eAAOR,eAAP,KAA2B,UAA3B,IAAyCA,eAAe,EAAxD;AACAE,QAAAA,KAAK,CAACO,eAAN,CAAsBL,KAAtB;AACD,OAHD,MAIK;AACHF,QAAAA,KAAK,CAACQ,aAAN,CAAoBN,KAApB;AACD;AACF,KARI,CAAL,CANmB,CAgBnB;;AACAD,IAAAA,KAAK,CAACI,OAAN,KAAkB,IAAlB,IAA0BL,KAAK,CAACQ,aAAN,CAAoBN,KAApB,CAA1B;AAEAR,IAAAA,eAAe,CAAC,MAAM;AACpB;AACAO,MAAAA,KAAK,CAACI,OAAN,KAAkB,IAAlB,IAA0BL,KAAK,CAACO,eAAN,CAAsBL,KAAtB,CAA1B;AACD,KAHc,CAAf;AAID,GAvBD,MAwBK,IAAIH,aAAa,KAAK,IAAtB,EAA4B;AAC/BU,IAAAA,OAAO,CAACC,KAAR,CAAc,2CAAd;AACD;AACF","sourcesContent":["import { inject, watch, onBeforeUnmount, getCurrentInstance } from 'vue'\n\nimport { formKey } from '../utils/private/symbols.js'\n\nexport default function ({ validate, resetValidation, requiresQForm }) {\n  const $form = inject(formKey, false)\n\n  if ($form !== false) {\n    const { props, proxy } = getCurrentInstance()\n\n    // export public method (so it can be used in QForm)\n    Object.assign(proxy, { validate, resetValidation })\n\n    watch(() => props.disable, val => {\n      if (val === true) {\n        typeof resetValidation === 'function' && resetValidation()\n        $form.unbindComponent(proxy)\n      }\n      else {\n        $form.bindComponent(proxy)\n      }\n    })\n\n    // register component to parent QForm\n    props.disable !== true && $form.bindComponent(proxy)\n\n    onBeforeUnmount(() => {\n      // unregister component\n      props.disable !== true && $form.unbindComponent(proxy)\n    })\n  }\n  else if (requiresQForm === true) {\n    console.error('Parent QForm not found on useFormChild()!')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}