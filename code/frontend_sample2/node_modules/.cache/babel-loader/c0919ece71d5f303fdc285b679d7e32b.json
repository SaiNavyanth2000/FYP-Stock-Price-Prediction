{"ast":null,"code":"import { watch, nextTick, onMounted, getCurrentInstance } from 'vue';\nimport { vmHasRouter } from '../../utils/private/vm.js';\nexport const useModelToggleProps = {\n  modelValue: {\n    type: Boolean,\n    default: null\n  },\n  'onUpdate:modelValue': [Function, Array]\n};\nexport const useModelToggleEmits = ['before-show', 'show', 'before-hide', 'hide']; // handleShow/handleHide -> removeTick(), self (& emit show)\n\nexport default function ({\n  showing,\n  canShow,\n  // optional\n  hideOnRouteChange,\n  // optional\n  handleShow,\n  // optional\n  handleHide,\n  // optional\n  processOnMount // optional\n\n}) {\n  const vm = getCurrentInstance();\n  const {\n    props,\n    emit,\n    proxy\n  } = vm;\n  let payload;\n\n  function toggle(evt) {\n    if (showing.value === true) {\n      hide(evt);\n    } else {\n      show(evt);\n    }\n  }\n\n  function show(evt) {\n    if (props.disable === true || evt !== void 0 && evt.qAnchorHandled === true || canShow !== void 0 && canShow(evt) !== true) {\n      return;\n    }\n\n    const listener = props['onUpdate:modelValue'] !== void 0;\n\n    if (listener === true && __QUASAR_SSR_SERVER__ !== true) {\n      emit('update:modelValue', true);\n      payload = evt;\n      nextTick(() => {\n        if (payload === evt) {\n          payload = void 0;\n        }\n      });\n    }\n\n    if (props.modelValue === null || listener === false || __QUASAR_SSR_SERVER__) {\n      processShow(evt);\n    }\n  }\n\n  function processShow(evt) {\n    if (showing.value === true) {\n      return;\n    }\n\n    showing.value = true;\n    emit('before-show', evt);\n\n    if (handleShow !== void 0) {\n      handleShow(evt);\n    } else {\n      emit('show', evt);\n    }\n  }\n\n  function hide(evt) {\n    if (__QUASAR_SSR_SERVER__ || props.disable === true) {\n      return;\n    }\n\n    const listener = props['onUpdate:modelValue'] !== void 0;\n\n    if (listener === true && __QUASAR_SSR_SERVER__ !== true) {\n      emit('update:modelValue', false);\n      payload = evt;\n      nextTick(() => {\n        if (payload === evt) {\n          payload = void 0;\n        }\n      });\n    }\n\n    if (props.modelValue === null || listener === false || __QUASAR_SSR_SERVER__) {\n      processHide(evt);\n    }\n  }\n\n  function processHide(evt) {\n    if (showing.value === false) {\n      return;\n    }\n\n    showing.value = false;\n    emit('before-hide', evt);\n\n    if (handleHide !== void 0) {\n      handleHide(evt);\n    } else {\n      emit('hide', evt);\n    }\n  }\n\n  function processModelChange(val) {\n    if (props.disable === true && val === true) {\n      if (props['onUpdate:modelValue'] !== void 0) {\n        emit('update:modelValue', false);\n      }\n    } else if (val === true !== showing.value) {\n      const fn = val === true ? processShow : processHide;\n      fn(payload);\n    }\n  }\n\n  watch(() => props.modelValue, processModelChange);\n\n  if (hideOnRouteChange !== void 0 && vmHasRouter(vm) === true) {\n    watch(() => proxy.$route.fullPath, () => {\n      if (hideOnRouteChange.value === true && showing.value === true) {\n        hide();\n      }\n    });\n  }\n\n  processOnMount === true && onMounted(() => {\n    processModelChange(props.modelValue);\n  }); // expose public methods\n\n  const publicMethods = {\n    show,\n    hide,\n    toggle\n  };\n  Object.assign(proxy, publicMethods);\n  return publicMethods;\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/composables/private/use-model-toggle.js"],"names":["watch","nextTick","onMounted","getCurrentInstance","vmHasRouter","useModelToggleProps","modelValue","type","Boolean","default","Function","Array","useModelToggleEmits","showing","canShow","hideOnRouteChange","handleShow","handleHide","processOnMount","vm","props","emit","proxy","payload","toggle","evt","value","hide","show","disable","qAnchorHandled","listener","__QUASAR_SSR_SERVER__","processShow","processHide","processModelChange","val","fn","$route","fullPath","publicMethods","Object","assign"],"mappings":"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","sourcesContent":["import { watch, nextTick, onMounted, getCurrentInstance } from 'vue'\n\nimport { vmHasRouter } from '../../utils/private/vm.js'\n\nexport const useModelToggleProps = {\n  modelValue: {\n    type: Boolean,\n    default: null\n  },\n\n  'onUpdate:modelValue': [ Function, Array ]\n}\n\nexport const useModelToggleEmits = [\n  'before-show', 'show', 'before-hide', 'hide'\n]\n\n// handleShow/handleHide -> removeTick(), self (& emit show)\n\nexport default function ({\n  showing,\n  canShow, // optional\n  hideOnRouteChange, // optional\n  handleShow, // optional\n  handleHide, // optional\n  processOnMount // optional\n}) {\n  const vm = getCurrentInstance()\n  const { props, emit, proxy } = vm\n\n  let payload\n\n  function toggle (evt) {\n    if (showing.value === true) {\n      hide(evt)\n    }\n    else {\n      show(evt)\n    }\n  }\n\n  function show (evt) {\n    if (\n      props.disable === true\n      || (evt !== void 0 && evt.qAnchorHandled === true)\n      || (canShow !== void 0 && canShow(evt) !== true)\n    ) {\n      return\n    }\n\n    const listener = props[ 'onUpdate:modelValue' ] !== void 0\n\n    if (listener === true && __QUASAR_SSR_SERVER__ !== true) {\n      emit('update:modelValue', true)\n      payload = evt\n      nextTick(() => {\n        if (payload === evt) {\n          payload = void 0\n        }\n      })\n    }\n\n    if (props.modelValue === null || listener === false || __QUASAR_SSR_SERVER__) {\n      processShow(evt)\n    }\n  }\n\n  function processShow (evt) {\n    if (showing.value === true) {\n      return\n    }\n\n    showing.value = true\n\n    emit('before-show', evt)\n\n    if (handleShow !== void 0) {\n      handleShow(evt)\n    }\n    else {\n      emit('show', evt)\n    }\n  }\n\n  function hide (evt) {\n    if (__QUASAR_SSR_SERVER__ || props.disable === true) {\n      return\n    }\n\n    const listener = props[ 'onUpdate:modelValue' ] !== void 0\n\n    if (listener === true && __QUASAR_SSR_SERVER__ !== true) {\n      emit('update:modelValue', false)\n      payload = evt\n      nextTick(() => {\n        if (payload === evt) {\n          payload = void 0\n        }\n      })\n    }\n\n    if (props.modelValue === null || listener === false || __QUASAR_SSR_SERVER__) {\n      processHide(evt)\n    }\n  }\n\n  function processHide (evt) {\n    if (showing.value === false) {\n      return\n    }\n\n    showing.value = false\n\n    emit('before-hide', evt)\n\n    if (handleHide !== void 0) {\n      handleHide(evt)\n    }\n    else {\n      emit('hide', evt)\n    }\n  }\n\n  function processModelChange (val) {\n    if (props.disable === true && val === true) {\n      if (props[ 'onUpdate:modelValue' ] !== void 0) {\n        emit('update:modelValue', false)\n      }\n    }\n    else if ((val === true) !== showing.value) {\n      const fn = val === true ? processShow : processHide\n      fn(payload)\n    }\n  }\n\n  watch(() => props.modelValue, processModelChange)\n\n  if (hideOnRouteChange !== void 0 && vmHasRouter(vm) === true) {\n    watch(() => proxy.$route.fullPath, () => {\n      if (hideOnRouteChange.value === true && showing.value === true) {\n        hide()\n      }\n    })\n  }\n\n  processOnMount === true && onMounted(() => {\n    processModelChange(props.modelValue)\n  })\n\n  // expose public methods\n  const publicMethods = { show, hide, toggle }\n  Object.assign(proxy, publicMethods)\n\n  return publicMethods\n}\n"]},"metadata":{},"sourceType":"module"}