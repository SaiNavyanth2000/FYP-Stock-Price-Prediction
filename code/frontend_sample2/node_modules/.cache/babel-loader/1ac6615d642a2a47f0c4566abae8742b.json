{"ast":null,"code":"import { h, ref, onActivated, onDeactivated, onMounted, getCurrentInstance, nextTick, provide } from 'vue';\nimport { createComponent } from '../../utils/private/create.js';\nimport { stopAndPrevent } from '../../utils/event.js';\nimport { addFocusFn } from '../../utils/private/focus-manager.js';\nimport { hSlot } from '../../utils/private/render.js';\nimport { formKey } from '../../utils/private/symbols.js';\nexport default createComponent({\n  name: 'QForm',\n  props: {\n    autofocus: Boolean,\n    noErrorFocus: Boolean,\n    noResetFocus: Boolean,\n    greedy: Boolean,\n    onSubmit: Function\n  },\n  emits: ['reset', 'validation-success', 'validation-error'],\n\n  setup(props, {\n    slots,\n    emit\n  }) {\n    const vm = getCurrentInstance();\n    const rootRef = ref(null);\n    let validateIndex = 0;\n    const registeredComponents = [];\n\n    function validate(shouldFocus) {\n      const promises = [];\n      const focus = typeof shouldFocus === 'boolean' ? shouldFocus : props.noErrorFocus !== true;\n      const index = ++validateIndex;\n\n      const emitEvent = (res, ref) => {\n        emit('validation-' + (res === true ? 'success' : 'error'), ref);\n      };\n\n      for (let i = 0; i < registeredComponents.length; i++) {\n        const comp = registeredComponents[i];\n        const valid = comp.validate();\n\n        if (typeof valid.then === 'function') {\n          promises.push(valid.then(valid => ({\n            valid,\n            comp\n          }), err => ({\n            valid: false,\n            comp,\n            err\n          })));\n        } else if (valid !== true) {\n          if (props.greedy === false) {\n            emitEvent(false, comp);\n\n            if (focus === true && typeof comp.focus === 'function') {\n              comp.focus();\n            }\n\n            return Promise.resolve(false);\n          }\n\n          promises.push({\n            valid: false,\n            comp\n          });\n        }\n      }\n\n      if (promises.length === 0) {\n        emitEvent(true);\n        return Promise.resolve(true);\n      }\n\n      return Promise.all(promises).then(res => {\n        const errors = res.filter(r => r.valid !== true);\n\n        if (errors.length === 0) {\n          index === validateIndex && emitEvent(true);\n          return true;\n        }\n\n        const {\n          valid,\n          comp,\n          err\n        } = errors[0]; // if not outdated already\n\n        if (index === validateIndex) {\n          err !== void 0 && console.error(err);\n          emitEvent(false, comp);\n\n          if (focus === true && valid !== true && typeof comp.focus === 'function') {\n            comp.focus();\n          }\n        }\n\n        return false;\n      });\n    }\n\n    function resetValidation() {\n      validateIndex++;\n      registeredComponents.forEach(comp => {\n        typeof comp.resetValidation === 'function' && comp.resetValidation();\n      });\n    }\n\n    function submit(evt) {\n      evt !== void 0 && stopAndPrevent(evt);\n      const index = validateIndex + 1;\n      validate().then(val => {\n        // if not outdated && validation succeeded\n        if (index === validateIndex && val === true) {\n          if (props.onSubmit !== void 0) {\n            emit('submit', evt);\n          } else if (evt !== void 0 && evt.target !== void 0 && typeof evt.target.submit === 'function') {\n            evt.target.submit();\n          }\n        }\n      });\n    }\n\n    function reset(evt) {\n      evt !== void 0 && stopAndPrevent(evt);\n      emit('reset');\n      nextTick(() => {\n        // allow userland to reset values before\n        resetValidation();\n\n        if (props.autofocus === true && props.noResetFocus !== true) {\n          focus();\n        }\n      });\n    }\n\n    function focus() {\n      addFocusFn(() => {\n        if (rootRef.value === null) {\n          return;\n        }\n\n        const target = rootRef.value.querySelector('[autofocus], [data-autofocus]') || Array.prototype.find.call(rootRef.value.querySelectorAll('[tabindex]'), el => el.tabIndex > -1);\n        target !== null && target !== void 0 && target.focus({\n          preventScroll: true\n        });\n      });\n    }\n\n    provide(formKey, {\n      bindComponent(vmProxy) {\n        registeredComponents.push(vmProxy);\n      },\n\n      unbindComponent(vmProxy) {\n        const index = registeredComponents.indexOf(vmProxy);\n\n        if (index > -1) {\n          registeredComponents.splice(index, 1);\n        }\n      }\n\n    });\n    let shouldActivate = false;\n    onDeactivated(() => {\n      shouldActivate = true;\n    });\n    onActivated(() => {\n      shouldActivate === true && props.autofocus === true && focus();\n    });\n    onMounted(() => {\n      props.autofocus === true && focus();\n    }); // expose public methods\n\n    Object.assign(vm.proxy, {\n      validate,\n      resetValidation,\n      submit,\n      reset,\n      focus,\n      getValidationComponents: () => registeredComponents\n    });\n    return () => h('form', {\n      class: 'q-form',\n      ref: rootRef,\n      onSubmit: submit,\n      onReset: reset\n    }, hSlot(slots.default));\n  }\n\n});","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/components/form/QForm.js"],"names":["h","ref","onActivated","onDeactivated","onMounted","getCurrentInstance","nextTick","provide","createComponent","stopAndPrevent","addFocusFn","hSlot","formKey","name","props","autofocus","Boolean","noErrorFocus","noResetFocus","greedy","onSubmit","Function","emits","setup","slots","emit","vm","rootRef","validateIndex","registeredComponents","validate","shouldFocus","promises","focus","index","emitEvent","res","i","length","comp","valid","then","push","err","Promise","resolve","all","errors","filter","r","console","error","resetValidation","forEach","submit","evt","val","target","reset","value","querySelector","Array","prototype","find","call","querySelectorAll","el","tabIndex","preventScroll","bindComponent","vmProxy","unbindComponent","indexOf","splice","shouldActivate","Object","assign","proxy","getValidationComponents","class","onReset","default"],"mappings":"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","sourcesContent":["import { h, ref, onActivated, onDeactivated, onMounted, getCurrentInstance, nextTick, provide } from 'vue'\n\nimport { createComponent } from '../../utils/private/create.js'\nimport { stopAndPrevent } from '../../utils/event.js'\nimport { addFocusFn } from '../../utils/private/focus-manager.js'\nimport { hSlot } from '../../utils/private/render.js'\nimport { formKey } from '../../utils/private/symbols.js'\n\nexport default createComponent({\n  name: 'QForm',\n\n  props: {\n    autofocus: Boolean,\n    noErrorFocus: Boolean,\n    noResetFocus: Boolean,\n    greedy: Boolean,\n\n    onSubmit: Function\n  },\n\n  emits: [ 'reset', 'validation-success', 'validation-error' ],\n\n  setup (props, { slots, emit }) {\n    const vm = getCurrentInstance()\n    const rootRef = ref(null)\n\n    let validateIndex = 0\n    const registeredComponents = []\n\n    function validate (shouldFocus) {\n      const promises = []\n      const focus = typeof shouldFocus === 'boolean'\n        ? shouldFocus\n        : props.noErrorFocus !== true\n\n      const index = ++validateIndex\n\n      const emitEvent = (res, ref) => {\n        emit('validation-' + (res === true ? 'success' : 'error'), ref)\n      }\n\n      for (let i = 0; i < registeredComponents.length; i++) {\n        const comp = registeredComponents[ i ]\n        const valid = comp.validate()\n\n        if (typeof valid.then === 'function') {\n          promises.push(\n            valid.then(\n              valid => ({ valid, comp }),\n              err => ({ valid: false, comp, err })\n            )\n          )\n        }\n        else if (valid !== true) {\n          if (props.greedy === false) {\n            emitEvent(false, comp)\n\n            if (focus === true && typeof comp.focus === 'function') {\n              comp.focus()\n            }\n\n            return Promise.resolve(false)\n          }\n\n          promises.push({ valid: false, comp })\n        }\n      }\n\n      if (promises.length === 0) {\n        emitEvent(true)\n        return Promise.resolve(true)\n      }\n\n      return Promise.all(promises).then(res => {\n        const errors = res.filter(r => r.valid !== true)\n\n        if (errors.length === 0) {\n          index === validateIndex && emitEvent(true)\n          return true\n        }\n\n        const { valid, comp, err } = errors[ 0 ]\n\n        // if not outdated already\n        if (index === validateIndex) {\n          err !== void 0 && console.error(err)\n\n          emitEvent(false, comp)\n\n          if (\n            focus === true\n            && valid !== true\n            && typeof comp.focus === 'function'\n          ) {\n            comp.focus()\n          }\n        }\n\n        return false\n      })\n    }\n\n    function resetValidation () {\n      validateIndex++\n\n      registeredComponents.forEach(comp => {\n        typeof comp.resetValidation === 'function' && comp.resetValidation()\n      })\n    }\n\n    function submit (evt) {\n      evt !== void 0 && stopAndPrevent(evt)\n\n      const index = validateIndex + 1\n\n      validate().then(val => {\n        // if not outdated && validation succeeded\n        if (index === validateIndex && val === true) {\n          if (props.onSubmit !== void 0) {\n            emit('submit', evt)\n          }\n          else if (evt !== void 0 && evt.target !== void 0 && typeof evt.target.submit === 'function') {\n            evt.target.submit()\n          }\n        }\n      })\n    }\n\n    function reset (evt) {\n      evt !== void 0 && stopAndPrevent(evt)\n\n      emit('reset')\n\n      nextTick(() => { // allow userland to reset values before\n        resetValidation()\n        if (props.autofocus === true && props.noResetFocus !== true) {\n          focus()\n        }\n      })\n    }\n\n    function focus () {\n      addFocusFn(() => {\n        if (rootRef.value === null) { return }\n\n        const target = rootRef.value.querySelector('[autofocus], [data-autofocus]')\n          || Array.prototype.find.call(rootRef.value.querySelectorAll('[tabindex]'), el => el.tabIndex > -1)\n\n        target !== null && target !== void 0 && target.focus({ preventScroll: true })\n      })\n    }\n\n    provide(formKey, {\n      bindComponent (vmProxy) {\n        registeredComponents.push(vmProxy)\n      },\n\n      unbindComponent (vmProxy) {\n        const index = registeredComponents.indexOf(vmProxy)\n        if (index > -1) {\n          registeredComponents.splice(index, 1)\n        }\n      }\n    })\n\n    let shouldActivate = false\n\n    onDeactivated(() => {\n      shouldActivate = true\n    })\n\n    onActivated(() => {\n      shouldActivate === true && props.autofocus === true && focus()\n    })\n\n    onMounted(() => {\n      props.autofocus === true && focus()\n    })\n\n    // expose public methods\n    Object.assign(vm.proxy, {\n      validate,\n      resetValidation,\n      submit,\n      reset,\n      focus,\n      getValidationComponents: () => registeredComponents\n    })\n\n    return () => h('form', {\n      class: 'q-form',\n      ref: rootRef,\n      onSubmit: submit,\n      onReset: reset\n    }, hSlot(slots.default))\n  }\n})\n"]},"metadata":{},"sourceType":"module"}