{"ast":null,"code":"import defineReactivePlugin from './utils/private/define-reactive-plugin.js';\nimport { injectProp } from './utils/private/inject-obj-prop.js'; // no extension on purpose for next one:\n\nimport materialIcons from '../icon-set/material-icons';\nconst Plugin = defineReactivePlugin({\n  iconMapFn: null,\n  __icons: {}\n}, {\n  set(setObject, ssrContext) {\n    const def = { ...setObject,\n      rtl: setObject.rtl === true\n    };\n\n    if (__QUASAR_SSR_SERVER__) {\n      if (ssrContext === void 0) {\n        console.error('SSR ERROR: second param required: Quasar.iconSet.set(iconSet, ssrContext)');\n        return;\n      }\n\n      def.set = ssrContext.$q.iconSet.set;\n      Object.assign(ssrContext.$q.iconSet, def);\n    } else {\n      def.set = Plugin.set;\n      Object.assign(Plugin.__icons, def);\n    }\n  },\n\n  install({\n    $q,\n    iconSet,\n    ssrContext\n  }) {\n    if (__QUASAR_SSR_SERVER__) {\n      const initialSet = iconSet || materialIcons;\n      $q.iconMapFn = ssrContext.$q.config.iconMapFn || this.iconMapFn || null;\n      $q.iconSet = {};\n\n      $q.iconSet.set = setObject => {\n        this.set(setObject, ssrContext);\n      };\n\n      $q.iconSet.set(initialSet);\n    } else {\n      if ($q.config.iconMapFn !== void 0) {\n        this.iconMapFn = $q.config.iconMapFn;\n      }\n\n      $q.iconSet = this.__icons;\n      injectProp($q, 'iconMapFn', () => this.iconMapFn, val => {\n        this.iconMapFn = val;\n      });\n\n      if (this.__installed === true) {\n        iconSet !== void 0 && this.set(iconSet);\n      } else {\n        this.set(iconSet || materialIcons);\n      }\n    }\n  }\n\n});\nexport default Plugin;","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/icon-set.js"],"names":["defineReactivePlugin","injectProp","materialIcons","Plugin","iconMapFn","__icons","set","setObject","ssrContext","def","rtl","__QUASAR_SSR_SERVER__","console","error","$q","iconSet","Object","assign","install","initialSet","config","val","__installed"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,2CAAjC;AACA,SAASC,UAAT,QAA2B,oCAA3B,C,CACA;;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,MAAMC,MAAM,GAAGH,oBAAoB,CAAC;AAClCI,EAAAA,SAAS,EAAE,IADuB;AAElCC,EAAAA,OAAO,EAAE;AAFyB,CAAD,EAGhC;AACDC,EAAAA,GAAG,CAAEC,SAAF,EAAaC,UAAb,EAAyB;AAC1B,UAAMC,GAAG,GAAG,EAAE,GAAGF,SAAL;AAAgBG,MAAAA,GAAG,EAAEH,SAAS,CAACG,GAAV,KAAkB;AAAvC,KAAZ;;AAEA,QAAIC,qBAAJ,EAA2B;AACzB,UAAIH,UAAU,KAAK,KAAK,CAAxB,EAA2B;AACzBI,QAAAA,OAAO,CAACC,KAAR,CAAc,2EAAd;AACA;AACD;;AAEDJ,MAAAA,GAAG,CAACH,GAAJ,GAAUE,UAAU,CAACM,EAAX,CAAcC,OAAd,CAAsBT,GAAhC;AACAU,MAAAA,MAAM,CAACC,MAAP,CAAcT,UAAU,CAACM,EAAX,CAAcC,OAA5B,EAAqCN,GAArC;AACD,KARD,MASK;AACHA,MAAAA,GAAG,CAACH,GAAJ,GAAUH,MAAM,CAACG,GAAjB;AACAU,MAAAA,MAAM,CAACC,MAAP,CAAcd,MAAM,CAACE,OAArB,EAA8BI,GAA9B;AACD;AACF,GAjBA;;AAmBDS,EAAAA,OAAO,CAAE;AAAEJ,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeP,IAAAA;AAAf,GAAF,EAA+B;AACpC,QAAIG,qBAAJ,EAA2B;AACzB,YAAMQ,UAAU,GAAGJ,OAAO,IAAIb,aAA9B;AAEAY,MAAAA,EAAE,CAACV,SAAH,GAAeI,UAAU,CAACM,EAAX,CAAcM,MAAd,CAAqBhB,SAArB,IAAkC,KAAKA,SAAvC,IAAoD,IAAnE;AACAU,MAAAA,EAAE,CAACC,OAAH,GAAa,EAAb;;AACAD,MAAAA,EAAE,CAACC,OAAH,CAAWT,GAAX,GAAiBC,SAAS,IAAI;AAC5B,aAAKD,GAAL,CAASC,SAAT,EAAoBC,UAApB;AACD,OAFD;;AAIAM,MAAAA,EAAE,CAACC,OAAH,CAAWT,GAAX,CAAea,UAAf;AACD,KAVD,MAWK;AACH,UAAIL,EAAE,CAACM,MAAH,CAAUhB,SAAV,KAAwB,KAAK,CAAjC,EAAoC;AAClC,aAAKA,SAAL,GAAiBU,EAAE,CAACM,MAAH,CAAUhB,SAA3B;AACD;;AAEDU,MAAAA,EAAE,CAACC,OAAH,GAAa,KAAKV,OAAlB;AAEAJ,MAAAA,UAAU,CAACa,EAAD,EAAK,WAAL,EAAkB,MAAM,KAAKV,SAA7B,EAAwCiB,GAAG,IAAI;AAAE,aAAKjB,SAAL,GAAiBiB,GAAjB;AAAsB,OAAvE,CAAV;;AAEA,UAAI,KAAKC,WAAL,KAAqB,IAAzB,EAA+B;AAC7BP,QAAAA,OAAO,KAAK,KAAK,CAAjB,IAAsB,KAAKT,GAAL,CAASS,OAAT,CAAtB;AACD,OAFD,MAGK;AACH,aAAKT,GAAL,CAASS,OAAO,IAAIb,aAApB;AACD;AACF;AACF;;AA/CA,CAHgC,CAAnC;AAqDA,eAAeC,MAAf","sourcesContent":["import defineReactivePlugin from './utils/private/define-reactive-plugin.js'\nimport { injectProp } from './utils/private/inject-obj-prop.js'\n// no extension on purpose for next one:\nimport materialIcons from '../icon-set/material-icons'\n\nconst Plugin = defineReactivePlugin({\n  iconMapFn: null,\n  __icons: {}\n}, {\n  set (setObject, ssrContext) {\n    const def = { ...setObject, rtl: setObject.rtl === true }\n\n    if (__QUASAR_SSR_SERVER__) {\n      if (ssrContext === void 0) {\n        console.error('SSR ERROR: second param required: Quasar.iconSet.set(iconSet, ssrContext)')\n        return\n      }\n\n      def.set = ssrContext.$q.iconSet.set\n      Object.assign(ssrContext.$q.iconSet, def)\n    }\n    else {\n      def.set = Plugin.set\n      Object.assign(Plugin.__icons, def)\n    }\n  },\n\n  install ({ $q, iconSet, ssrContext }) {\n    if (__QUASAR_SSR_SERVER__) {\n      const initialSet = iconSet || materialIcons\n\n      $q.iconMapFn = ssrContext.$q.config.iconMapFn || this.iconMapFn || null\n      $q.iconSet = {}\n      $q.iconSet.set = setObject => {\n        this.set(setObject, ssrContext)\n      }\n\n      $q.iconSet.set(initialSet)\n    }\n    else {\n      if ($q.config.iconMapFn !== void 0) {\n        this.iconMapFn = $q.config.iconMapFn\n      }\n\n      $q.iconSet = this.__icons\n\n      injectProp($q, 'iconMapFn', () => this.iconMapFn, val => { this.iconMapFn = val })\n\n      if (this.__installed === true) {\n        iconSet !== void 0 && this.set(iconSet)\n      }\n      else {\n        this.set(iconSet || materialIcons)\n      }\n    }\n  }\n})\n\nexport default Plugin\n"]},"metadata":{},"sourceType":"module"}