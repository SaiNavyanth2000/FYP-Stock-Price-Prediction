{"ast":null,"code":"import { isObject } from './private/is';\nlet id = 0;\nlet offsetBase = void 0;\n\nfunction getAbsolutePosition(el, resize) {\n  if (offsetBase === void 0) {\n    offsetBase = document.createElement('div');\n    offsetBase.style.cssText = 'position: absolute; left: 0; top: 0';\n    document.body.appendChild(offsetBase);\n  }\n\n  const boundingRect = el.getBoundingClientRect();\n  const baseRect = offsetBase.getBoundingClientRect();\n  const {\n    marginLeft,\n    marginRight,\n    marginTop,\n    marginBottom\n  } = window.getComputedStyle(el);\n  const marginH = parseInt(marginLeft, 10) + parseInt(marginRight, 10);\n  const marginV = parseInt(marginTop, 10) + parseInt(marginBottom, 10);\n  return {\n    left: boundingRect.left - baseRect.left,\n    top: boundingRect.top - baseRect.top,\n    width: boundingRect.right - boundingRect.left,\n    height: boundingRect.bottom - boundingRect.top,\n    widthM: boundingRect.right - boundingRect.left + (resize === true ? 0 : marginH),\n    heightM: boundingRect.bottom - boundingRect.top + (resize === true ? 0 : marginV),\n    marginH: resize === true ? marginH : 0,\n    marginV: resize === true ? marginV : 0\n  };\n}\n\nfunction getAbsoluteSize(el) {\n  return {\n    width: el.scrollWidth,\n    height: el.scrollHeight\n  };\n} // firefox rulez\n\n\nconst styleEdges = ['Top', 'Right', 'Bottom', 'Left'];\nconst styleBorderRadiuses = ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'];\nconst reStyleSkipKey = /-block|-inline|block-|inline-/;\nconst reStyleSkipRule = /(-block|-inline|block-|inline-).*:/;\n\nfunction getComputedStyle(el, props) {\n  const style = window.getComputedStyle(el);\n  const fixed = {};\n\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n\n    if (style[prop] === '') {\n      if (prop === 'cssText') {\n        const styleLen = style.length;\n        let val = '';\n\n        for (let i = 0; i < styleLen; i++) {\n          if (reStyleSkipKey.test(style[i]) !== true) {\n            val += style[i] + ': ' + style[style[i]] + '; ';\n          }\n        }\n\n        fixed[prop] = val;\n      } else if (['borderWidth', 'borderStyle', 'borderColor'].indexOf(prop) > -1) {\n        const suffix = prop.replace('border', '');\n        let val = '';\n\n        for (let j = 0; j < styleEdges.length; j++) {\n          const subProp = 'border' + styleEdges[j] + suffix;\n          val += style[subProp] + ' ';\n        }\n\n        fixed[prop] = val;\n      } else if (prop === 'borderRadius') {\n        let val1 = '';\n        let val2 = '';\n\n        for (let j = 0; j < styleBorderRadiuses.length; j++) {\n          const val = style[styleBorderRadiuses[j]].split(' ');\n          val1 += val[0] + ' ';\n          val2 += (val[1] === void 0 ? val[0] : val[1]) + ' ';\n        }\n\n        fixed[prop] = val1 + '/ ' + val2;\n      } else {\n        fixed[prop] = style[prop];\n      }\n    } else {\n      if (prop === 'cssText') {\n        fixed[prop] = style[prop].split(';').filter(val => reStyleSkipRule.test(val) !== true).join(';');\n      } else {\n        fixed[prop] = style[prop];\n      }\n    }\n  }\n\n  return fixed;\n}\n\nconst zIndexPositions = ['absolute', 'fixed', 'relative', 'sticky'];\n\nfunction getMaxZIndex(elStart) {\n  let el = elStart;\n  let maxIndex = 0;\n\n  while (el !== null && el !== document) {\n    const {\n      position,\n      zIndex\n    } = window.getComputedStyle(el);\n    const zIndexNum = Number(zIndex);\n\n    if (zIndexNum > maxIndex && (el === elStart || zIndexPositions.includes(position) === true)) {\n      maxIndex = zIndexNum;\n    }\n\n    el = el.parentNode;\n  }\n\n  return maxIndex;\n}\n\nfunction normalizeElements(opts) {\n  return {\n    from: opts.from,\n    to: opts.to !== void 0 ? opts.to : opts.from\n  };\n}\n\nfunction normalizeOptions(options) {\n  if (typeof options === 'number') {\n    options = {\n      duration: options\n    };\n  } else if (typeof options === 'function') {\n    options = {\n      onEnd: options\n    };\n  }\n\n  return { ...options,\n    waitFor: options.waitFor === void 0 ? 0 : options.waitFor,\n    duration: isNaN(options.duration) === true ? 300 : parseInt(options.duration, 10),\n    easing: typeof options.easing === 'string' && options.easing.length > 0 ? options.easing : 'ease-in-out',\n    delay: isNaN(options.delay) === true ? 0 : parseInt(options.delay, 10),\n    fill: typeof options.fill === 'string' && options.fill.length > 0 ? options.fill : 'none',\n    resize: options.resize === true,\n    useCSS: options.useCSS === true,\n    hideFromClone: options.hideFromClone === true,\n    keepToClone: options.keepToClone === true,\n    tween: options.tween === true,\n    tweenFromOpacity: isNaN(options.tweenFromOpacity) === true ? 0.6 : parseFloat(options.tweenFromOpacity),\n    tweenToOpacity: isNaN(options.tweenToOpacity) === true ? 0.5 : parseFloat(options.tweenToOpacity)\n  };\n}\n\nfunction getElement(element) {\n  const type = typeof element;\n  return type === 'function' ? element() : type === 'string' ? document.querySelector(element) : element;\n}\n\nfunction isValidElement(element) {\n  return element && element.ownerDocument === document && element.parentNode !== null;\n}\n\nexport default function morph(_options) {\n  let cancel = () => false;\n\n  let cancelStatus = false;\n  let endElementTo = true;\n  const elements = normalizeElements(_options);\n  const options = normalizeOptions(_options);\n  const elFrom = getElement(elements.from);\n\n  if (isValidElement(elFrom) !== true) {\n    // we return a cancel function that return false, meaning the cancel function failed\n    return cancel;\n  } // we clean other morphs running on this element\n\n\n  typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel();\n  let animationFromClone = void 0;\n  let animationFromTween = void 0;\n  let animationToClone = void 0;\n  let animationTo = void 0;\n  const elFromParent = elFrom.parentNode;\n  const elFromNext = elFrom.nextElementSibling; // we get the dimensions and characteristics\n  // of the parent of the initial element before changes\n\n  const elFromPosition = getAbsolutePosition(elFrom, options.resize);\n  const {\n    width: elFromParentWidthBefore,\n    height: elFromParentHeightBefore\n  } = getAbsoluteSize(elFromParent);\n  const {\n    borderWidth: elFromBorderWidth,\n    borderStyle: elFromBorderStyle,\n    borderColor: elFromBorderColor,\n    borderRadius: elFromBorderRadius,\n    backgroundColor: elFromBackground,\n    transform: elFromTransform,\n    position: elFromPositioningType,\n    cssText: elFromCssText\n  } = getComputedStyle(elFrom, ['borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText']);\n  const elFromClassSaved = elFrom.classList.toString();\n  const elFromStyleSaved = elFrom.style.cssText; // we make a clone of the initial element and\n  // use it to display until the final element is ready\n  // and to change the occupied space during animation\n\n  const elFromClone = elFrom.cloneNode(true);\n  const elFromTween = options.tween === true ? elFrom.cloneNode(true) : void 0;\n\n  if (elFromTween !== void 0) {\n    elFromTween.className = elFromTween.classList.toString().split(' ').filter(c => /^bg-/.test(c) === false).join(' ');\n  } // if the initial element is not going to be removed do not show the placeholder\n\n\n  options.hideFromClone === true && elFromClone.classList.add('q-morph--internal'); // prevent interaction with placeholder\n\n  elFromClone.setAttribute('aria-hidden', 'true');\n  elFromClone.style.transition = 'none';\n  elFromClone.style.animation = 'none';\n  elFromClone.style.pointerEvents = 'none';\n  elFromParent.insertBefore(elFromClone, elFromNext); // we mark the element with its cleanup function\n\n  elFrom.qMorphCancel = () => {\n    cancelStatus = true; // we clean the clone of the initial element\n\n    elFromClone.remove();\n    elFromTween !== void 0 && elFromTween.remove();\n    options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal'); // we remove the cleanup function from the element\n\n    elFrom.qMorphCancel = void 0;\n  }; // will be called after Vue catches up with the changes done by _options.onToggle() function\n\n\n  const calculateFinalState = () => {\n    const elTo = getElement(elements.to);\n\n    if (cancelStatus === true || isValidElement(elTo) !== true) {\n      typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel();\n      return;\n    } // we clean other morphs running on this element\n\n\n    elFrom !== elTo && typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel(); // we hide the final element and the clone of the initial element\n    // we don't hide the final element if we want both it and the animated one visible\n\n    options.keepToClone !== true && elTo.classList.add('q-morph--internal');\n    elFromClone.classList.add('q-morph--internal'); // we get the dimensions of the parent of the initial element after changes\n    // the difference is how much we should animate the clone\n\n    const {\n      width: elFromParentWidthAfter,\n      height: elFromParentHeightAfter\n    } = getAbsoluteSize(elFromParent); // we get the dimensions of the parent of the final element before changes\n\n    const {\n      width: elToParentWidthBefore,\n      height: elToParentHeightBefore\n    } = getAbsoluteSize(elTo.parentNode); // then we show the clone of the initial element if we don't want it hidden\n\n    options.hideFromClone !== true && elFromClone.classList.remove('q-morph--internal'); // we mark the element with its cleanup function\n\n    elTo.qMorphCancel = () => {\n      cancelStatus = true; // we clean the clone of the initial element\n\n      elFromClone.remove();\n      elFromTween !== void 0 && elFromTween.remove();\n      options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal'); // we show the final element\n\n      options.keepToClone !== true && elTo.classList.remove('q-morph--internal'); // we remove the cleanup function from the elements\n\n      elFrom.qMorphCancel = void 0;\n      elTo.qMorphCancel = void 0;\n    }; // will be called after waitFor (give time to render the final element)\n\n\n    const animate = () => {\n      if (cancelStatus === true) {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel();\n        return;\n      } // now the animation starts, so we only need the clone\n      // of the initial element as a spacer\n      // we also hide it to calculate the dimensions of the\n      // parent of the final element after the changes\n\n\n      if (options.hideFromClone !== true) {\n        elFromClone.classList.add('q-morph--internal');\n        elFromClone.innerHTML = '';\n        elFromClone.style.left = 0;\n        elFromClone.style.right = 'unset';\n        elFromClone.style.top = 0;\n        elFromClone.style.bottom = 'unset';\n        elFromClone.style.transform = 'none';\n      } // we show the final element\n\n\n      if (options.keepToClone !== true) {\n        elTo.classList.remove('q-morph--internal');\n      } // we get the dimensions of the parent of the final element after changes\n      // the difference is how much we should animate the clone\n\n\n      const elToParent = elTo.parentNode;\n      const {\n        width: elToParentWidthAfter,\n        height: elToParentHeightAfter\n      } = getAbsoluteSize(elToParent);\n      const elToClone = elTo.cloneNode(options.keepToClone);\n      elToClone.setAttribute('aria-hidden', 'true');\n\n      if (options.keepToClone !== true) {\n        elToClone.style.left = 0;\n        elToClone.style.right = 'unset';\n        elToClone.style.top = 0;\n        elToClone.style.bottom = 'unset';\n        elToClone.style.transform = 'none';\n        elToClone.style.pointerEvents = 'none';\n      }\n\n      elToClone.classList.add('q-morph--internal'); // if elFrom is the same as elTo the next element is elFromClone\n\n      const elToNext = elTo === elFrom && elFromParent === elToParent ? elFromClone : elTo.nextElementSibling;\n      elToParent.insertBefore(elToClone, elToNext);\n      const {\n        borderWidth: elToBorderWidth,\n        borderStyle: elToBorderStyle,\n        borderColor: elToBorderColor,\n        borderRadius: elToBorderRadius,\n        backgroundColor: elToBackground,\n        transform: elToTransform,\n        position: elToPositioningType,\n        cssText: elToCssText\n      } = getComputedStyle(elTo, ['borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText']);\n      const elToClassSaved = elTo.classList.toString();\n      const elToStyleSaved = elTo.style.cssText; // we set the computed styles on the element (to be able to remove classes)\n\n      elTo.style.cssText = elToCssText;\n      elTo.style.transform = 'none';\n      elTo.style.animation = 'none';\n      elTo.style.transition = 'none'; // we strip the background classes (background color can no longer be animated if !important is used)\n\n      elTo.className = elToClassSaved.split(' ').filter(c => /^bg-/.test(c) === false).join(' ');\n      const elToPosition = getAbsolutePosition(elTo, options.resize);\n      const deltaX = elFromPosition.left - elToPosition.left;\n      const deltaY = elFromPosition.top - elToPosition.top;\n      const scaleX = elFromPosition.width / (elToPosition.width > 0 ? elToPosition.width : 10);\n      const scaleY = elFromPosition.height / (elToPosition.height > 0 ? elToPosition.height : 100);\n      const elFromParentWidthDiff = elFromParentWidthBefore - elFromParentWidthAfter;\n      const elFromParentHeightDiff = elFromParentHeightBefore - elFromParentHeightAfter;\n      const elToParentWidthDiff = elToParentWidthAfter - elToParentWidthBefore;\n      const elToParentHeightDiff = elToParentHeightAfter - elToParentHeightBefore;\n      const elFromCloneWidth = Math.max(elFromPosition.widthM, elFromParentWidthDiff);\n      const elFromCloneHeight = Math.max(elFromPosition.heightM, elFromParentHeightDiff);\n      const elToCloneWidth = Math.max(elToPosition.widthM, elToParentWidthDiff);\n      const elToCloneHeight = Math.max(elToPosition.heightM, elToParentHeightDiff);\n      const elSharedSize = elFrom === elTo && ['absolute', 'fixed'].includes(elToPositioningType) === false && ['absolute', 'fixed'].includes(elFromPositioningType) === false; // if the final element has fixed position or if a parent\n      // has fixed position we need to animate it as fixed\n\n      let elToNeedsFixedPosition = elToPositioningType === 'fixed';\n      let parent = elToParent;\n\n      while (elToNeedsFixedPosition !== true && parent !== document) {\n        elToNeedsFixedPosition = window.getComputedStyle(parent).position === 'fixed';\n        parent = parent.parentNode;\n      } // we show the spacer for the initial element\n\n\n      if (options.hideFromClone !== true) {\n        elFromClone.style.display = 'block';\n        elFromClone.style.flex = '0 0 auto';\n        elFromClone.style.opacity = 0;\n        elFromClone.style.minWidth = 'unset';\n        elFromClone.style.maxWidth = 'unset';\n        elFromClone.style.minHeight = 'unset';\n        elFromClone.style.maxHeight = 'unset';\n        elFromClone.classList.remove('q-morph--internal');\n      } // we show the spacer for the final element\n\n\n      if (options.keepToClone !== true) {\n        elToClone.style.display = 'block';\n        elToClone.style.flex = '0 0 auto';\n        elToClone.style.opacity = 0;\n        elToClone.style.minWidth = 'unset';\n        elToClone.style.maxWidth = 'unset';\n        elToClone.style.minHeight = 'unset';\n        elToClone.style.maxHeight = 'unset';\n      }\n\n      elToClone.classList.remove('q-morph--internal'); // we apply classes specified by user\n\n      if (typeof options.classes === 'string') {\n        elTo.className += ' ' + options.classes;\n      } // we apply styles specified by user\n\n\n      if (typeof options.style === 'string') {\n        elTo.style.cssText += ' ' + options.style;\n      } else if (isObject(options.style) === true) {\n        for (const prop in options.style) {\n          elTo.style[prop] = options.style[prop];\n        }\n      }\n\n      const elFromZIndex = getMaxZIndex(elFromClone);\n      const elToZIndex = getMaxZIndex(elTo); // we position the morphing element\n      // if we use fixed position for the final element we need to adjust for scroll\n\n      const documentScroll = elToNeedsFixedPosition === true ? document.documentElement : {\n        scrollLeft: 0,\n        scrollTop: 0\n      };\n      elTo.style.position = elToNeedsFixedPosition === true ? 'fixed' : 'absolute';\n      elTo.style.left = `${elToPosition.left - documentScroll.scrollLeft}px`;\n      elTo.style.right = 'unset';\n      elTo.style.top = `${elToPosition.top - documentScroll.scrollTop}px`;\n      elTo.style.margin = 0;\n\n      if (options.resize === true) {\n        elTo.style.minWidth = 'unset';\n        elTo.style.maxWidth = 'unset';\n        elTo.style.minHeight = 'unset';\n        elTo.style.maxHeight = 'unset';\n        elTo.style.overflow = 'hidden';\n        elTo.style.overflowX = 'hidden';\n        elTo.style.overflowY = 'hidden';\n      }\n\n      document.body.appendChild(elTo);\n\n      if (elFromTween !== void 0) {\n        elFromTween.style.cssText = elFromCssText;\n        elFromTween.style.transform = 'none';\n        elFromTween.style.animation = 'none';\n        elFromTween.style.transition = 'none';\n        elFromTween.style.position = elTo.style.position;\n        elFromTween.style.left = `${elFromPosition.left - documentScroll.scrollLeft}px`;\n        elFromTween.style.right = 'unset';\n        elFromTween.style.top = `${elFromPosition.top - documentScroll.scrollTop}px`;\n        elFromTween.style.margin = 0;\n        elFromTween.style.pointerEvents = 'none';\n\n        if (options.resize === true) {\n          elFromTween.style.minWidth = 'unset';\n          elFromTween.style.maxWidth = 'unset';\n          elFromTween.style.minHeight = 'unset';\n          elFromTween.style.maxHeight = 'unset';\n          elFromTween.style.overflow = 'hidden';\n          elFromTween.style.overflowX = 'hidden';\n          elFromTween.style.overflowY = 'hidden';\n        }\n\n        document.body.appendChild(elFromTween);\n      }\n\n      const commonCleanup = aborted => {\n        // we put the element back in it's place\n        // and restore the styles and classes\n        if (elFrom === elTo && endElementTo !== true) {\n          elTo.style.cssText = elFromStyleSaved;\n          elTo.className = elFromClassSaved;\n        } else {\n          elTo.style.cssText = elToStyleSaved;\n          elTo.className = elToClassSaved;\n        }\n\n        elToClone.parentNode === elToParent && elToParent.insertBefore(elTo, elToClone); // we clean the spacers\n\n        elFromClone.remove();\n        elToClone.remove();\n        elFromTween !== void 0 && elFromTween.remove(); // cancel will be no longer available\n\n        cancel = () => false;\n\n        elFrom.qMorphCancel = void 0;\n        elTo.qMorphCancel = void 0; // we are ready\n\n        if (typeof options.onEnd === 'function') {\n          options.onEnd(endElementTo === true ? 'to' : 'from', aborted === true);\n        }\n      };\n\n      if (options.useCSS !== true && typeof elTo.animate === 'function') {\n        const resizeFrom = options.resize === true ? {\n          transform: `translate(${deltaX}px, ${deltaY}px)`,\n          width: `${elFromCloneWidth}px`,\n          height: `${elFromCloneHeight}px`\n        } : {\n          transform: `translate(${deltaX}px, ${deltaY}px) scale(${scaleX}, ${scaleY})`\n        };\n        const resizeTo = options.resize === true ? {\n          width: `${elToCloneWidth}px`,\n          height: `${elToCloneHeight}px`\n        } : {};\n        const resizeFromTween = options.resize === true ? {\n          width: `${elFromCloneWidth}px`,\n          height: `${elFromCloneHeight}px`\n        } : {};\n        const resizeToTween = options.resize === true ? {\n          transform: `translate(${-1 * deltaX}px, ${-1 * deltaY}px)`,\n          width: `${elToCloneWidth}px`,\n          height: `${elToCloneHeight}px`\n        } : {\n          transform: `translate(${-1 * deltaX}px, ${-1 * deltaY}px) scale(${1 / scaleX}, ${1 / scaleY})`\n        };\n        const tweenFrom = elFromTween !== void 0 ? {\n          opacity: options.tweenToOpacity\n        } : {\n          backgroundColor: elFromBackground\n        };\n        const tweenTo = elFromTween !== void 0 ? {\n          opacity: 1\n        } : {\n          backgroundColor: elToBackground\n        };\n        animationTo = elTo.animate([{\n          margin: 0,\n          borderWidth: elFromBorderWidth,\n          borderStyle: elFromBorderStyle,\n          borderColor: elFromBorderColor,\n          borderRadius: elFromBorderRadius,\n          zIndex: elFromZIndex,\n          transformOrigin: '0 0',\n          ...resizeFrom,\n          ...tweenFrom\n        }, {\n          margin: 0,\n          borderWidth: elToBorderWidth,\n          borderStyle: elToBorderStyle,\n          borderColor: elToBorderColor,\n          borderRadius: elToBorderRadius,\n          zIndex: elToZIndex,\n          transformOrigin: '0 0',\n          transform: elToTransform,\n          ...resizeTo,\n          ...tweenTo\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationFromTween = elFromTween === void 0 ? void 0 : elFromTween.animate([{\n          opacity: options.tweenFromOpacity,\n          margin: 0,\n          borderWidth: elFromBorderWidth,\n          borderStyle: elFromBorderStyle,\n          borderColor: elFromBorderColor,\n          borderRadius: elFromBorderRadius,\n          zIndex: elFromZIndex,\n          transformOrigin: '0 0',\n          transform: elFromTransform,\n          ...resizeFromTween\n        }, {\n          opacity: 0,\n          margin: 0,\n          borderWidth: elToBorderWidth,\n          borderStyle: elToBorderStyle,\n          borderColor: elToBorderColor,\n          borderRadius: elToBorderRadius,\n          zIndex: elToZIndex,\n          transformOrigin: '0 0',\n          ...resizeToTween\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationFromClone = options.hideFromClone === true || elSharedSize === true ? void 0 : elFromClone.animate([{\n          margin: `${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px`,\n          width: `${elFromCloneWidth + elFromPosition.marginH}px`,\n          height: `${elFromCloneHeight + elFromPosition.marginV}px`\n        }, {\n          margin: 0,\n          width: 0,\n          height: 0\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n        animationToClone = options.keepToClone === true ? void 0 : elToClone.animate([elSharedSize === true ? {\n          margin: `${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px`,\n          width: `${elFromCloneWidth + elFromPosition.marginH}px`,\n          height: `${elFromCloneHeight + elFromPosition.marginV}px`\n        } : {\n          margin: 0,\n          width: 0,\n          height: 0\n        }, {\n          margin: `${elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0}px ${elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0}px`,\n          width: `${elToCloneWidth + elToPosition.marginH}px`,\n          height: `${elToCloneHeight + elToPosition.marginV}px`\n        }], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        });\n\n        const cleanup = abort => {\n          animationFromClone !== void 0 && animationFromClone.cancel();\n          animationFromTween !== void 0 && animationFromTween.cancel();\n          animationToClone !== void 0 && animationToClone.cancel();\n          animationTo.cancel();\n          animationTo.removeEventListener('finish', cleanup);\n          animationTo.removeEventListener('cancel', cleanup);\n          commonCleanup(abort); // we clean the animations\n\n          animationFromClone = void 0;\n          animationFromTween = void 0;\n          animationToClone = void 0;\n          animationTo = void 0;\n        };\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n\n        animationTo.addEventListener('finish', cleanup);\n        animationTo.addEventListener('cancel', cleanup);\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || animationTo === void 0) {\n            return false;\n          }\n\n          if (abort === true) {\n            cleanup(true);\n            return true;\n          }\n\n          endElementTo = endElementTo !== true;\n          animationFromClone !== void 0 && animationFromClone.reverse();\n          animationFromTween !== void 0 && animationFromTween.reverse();\n          animationToClone !== void 0 && animationToClone.reverse();\n          animationTo.reverse();\n          return true;\n        };\n      } else {\n        const qAnimId = `q-morph-anim-${++id}`;\n        const style = document.createElement('style');\n        const resizeFrom = options.resize === true ? `\n            transform: translate(${deltaX}px, ${deltaY}px);\n            width: ${elFromCloneWidth}px;\n            height: ${elFromCloneHeight}px;\n          ` : `transform: translate(${deltaX}px, ${deltaY}px) scale(${scaleX}, ${scaleY});`;\n        const resizeTo = options.resize === true ? `\n            width: ${elToCloneWidth}px;\n            height: ${elToCloneHeight}px;\n          ` : '';\n        const resizeFromTween = options.resize === true ? `\n            width: ${elFromCloneWidth}px;\n            height: ${elFromCloneHeight}px;\n          ` : '';\n        const resizeToTween = options.resize === true ? `\n            transform: translate(${-1 * deltaX}px, ${-1 * deltaY}px);\n            width: ${elToCloneWidth}px;\n            height: ${elToCloneHeight}px;\n          ` : `transform: translate(${-1 * deltaX}px, ${-1 * deltaY}px) scale(${1 / scaleX}, ${1 / scaleY});`;\n        const tweenFrom = elFromTween !== void 0 ? `opacity: ${options.tweenToOpacity};` : `background-color: ${elFromBackground};`;\n        const tweenTo = elFromTween !== void 0 ? 'opacity: 1;' : `background-color: ${elToBackground};`;\n        const keyframesFromTween = elFromTween === void 0 ? '' : `\n            @keyframes ${qAnimId}-from-tween {\n              0% {\n                opacity: ${options.tweenFromOpacity};\n                margin: 0;\n                border-width: ${elFromBorderWidth};\n                border-style: ${elFromBorderStyle};\n                border-color: ${elFromBorderColor};\n                border-radius: ${elFromBorderRadius};\n                z-index: ${elFromZIndex};\n                transform-origin: 0 0;\n                transform: ${elFromTransform};\n                ${resizeFromTween}\n              }\n\n              100% {\n                opacity: 0;\n                margin: 0;\n                border-width: ${elToBorderWidth};\n                border-style: ${elToBorderStyle};\n                border-color: ${elToBorderColor};\n                border-radius: ${elToBorderRadius};\n                z-index: ${elToZIndex};\n                transform-origin: 0 0;\n                ${resizeToTween}\n              }\n            }\n          `;\n        const keyframesFrom = options.hideFromClone === true || elSharedSize === true ? '' : `\n            @keyframes ${qAnimId}-from {\n              0% {\n                margin: ${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px;\n                width: ${elFromCloneWidth + elFromPosition.marginH}px;\n                height: ${elFromCloneHeight + elFromPosition.marginV}px;\n              }\n\n              100% {\n                margin: 0;\n                width: 0;\n                height: 0;\n              }\n            }\n          `;\n        const keyframeToStart = elSharedSize === true ? `\n            margin: ${elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0}px ${elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0}px;\n            width: ${elFromCloneWidth + elFromPosition.marginH}px;\n            height: ${elFromCloneHeight + elFromPosition.marginV}px;\n          ` : `\n            margin: 0;\n            width: 0;\n            height: 0;\n          `;\n        const keyframesTo = options.keepToClone === true ? '' : `\n            @keyframes ${qAnimId}-to {\n              0% {\n                ${keyframeToStart}\n              }\n\n              100% {\n                margin: ${elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0}px ${elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0}px;\n                width: ${elToCloneWidth + elToPosition.marginH}px;\n                height: ${elToCloneHeight + elToPosition.marginV}px;\n              }\n            }\n          `;\n        style.innerHTML = `\n          @keyframes ${qAnimId} {\n            0% {\n              margin: 0;\n              border-width: ${elFromBorderWidth};\n              border-style: ${elFromBorderStyle};\n              border-color: ${elFromBorderColor};\n              border-radius: ${elFromBorderRadius};\n              background-color: ${elFromBackground};\n              z-index: ${elFromZIndex};\n              transform-origin: 0 0;\n              ${resizeFrom}\n              ${tweenFrom}\n            }\n\n            100% {\n              margin: 0;\n              border-width: ${elToBorderWidth};\n              border-style: ${elToBorderStyle};\n              border-color: ${elToBorderColor};\n              border-radius: ${elToBorderRadius};\n              background-color: ${elToBackground};\n              z-index: ${elToZIndex};\n              transform-origin: 0 0;\n              transform: ${elToTransform};\n              ${resizeTo}\n              ${tweenTo}\n            }\n          }\n\n          ${keyframesFrom}\n\n          ${keyframesFromTween}\n\n          ${keyframesTo}\n        `;\n        document.head.appendChild(style);\n        let animationDirection = 'normal';\n        elFromClone.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-from`;\n\n        if (elFromTween !== void 0) {\n          elFromTween.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-from-tween`;\n        }\n\n        elToClone.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}-to`;\n        elTo.style.animation = `${options.duration}ms ${options.easing} ${options.delay}ms ${animationDirection} ${options.fill} ${qAnimId}`;\n\n        const cleanup = evt => {\n          if (evt === Object(evt) && evt.animationName !== qAnimId) {\n            return;\n          }\n\n          elTo.removeEventListener('animationend', cleanup);\n          elTo.removeEventListener('animationcancel', cleanup);\n          commonCleanup(); // we clean the animations\n\n          style.remove();\n        };\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0;\n          cancelStatus = true;\n          cleanup();\n        };\n\n        elTo.addEventListener('animationend', cleanup);\n        elTo.addEventListener('animationcancel', cleanup);\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || !elTo || !elFromClone || !elToClone) {\n            return false;\n          }\n\n          if (abort === true) {\n            cleanup();\n            return true;\n          }\n\n          endElementTo = endElementTo !== true;\n          animationDirection = animationDirection === 'normal' ? 'reverse' : 'normal';\n          elFromClone.style.animationDirection = animationDirection;\n          elFromTween.style.animationDirection = animationDirection;\n          elToClone.style.animationDirection = animationDirection;\n          elTo.style.animationDirection = animationDirection;\n          return true;\n        };\n      }\n    };\n\n    if (options.waitFor > 0 || options.waitFor === 'transitionend' || options.waitFor === Object(options.waitFor) && typeof options.waitFor.then === 'function') {\n      const delayPromise = options.waitFor > 0 ? new Promise(resolve => setTimeout(resolve, options.waitFor)) : options.waitFor === 'transitionend' ? new Promise(resolve => {\n        const timer = setTimeout(() => {\n          endFn();\n        }, 400);\n\n        const endFn = ev => {\n          clearTimeout(timer);\n\n          if (elTo) {\n            elTo.removeEventListener('transitionend', endFn);\n            elTo.removeEventListener('transitioncancel', endFn);\n          }\n\n          resolve();\n        };\n\n        elTo.addEventListener('transitionend', endFn);\n        elTo.addEventListener('transitioncancel', endFn);\n      }) : options.waitFor;\n      delayPromise.then(animate).catch(() => {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel();\n      });\n    } else {\n      animate();\n    }\n  };\n\n  typeof _options.onToggle === 'function' && _options.onToggle();\n  requestAnimationFrame(calculateFinalState); // we return the cancel function\n  // returns:\n  //   false if the cancel cannot be performed (the morph ended already or has not started)\n  //   true else\n\n  return abort => cancel(abort);\n}","map":{"version":3,"sources":["C:/Users/saina/OneDrive - City University of Hong Kong/Desktop/cityu/Cityu Year 4/FYP/code/frontend_sample2/node_modules/quasar/src/utils/morph.js"],"names":["isObject","id","offsetBase","getAbsolutePosition","el","resize","document","createElement","style","cssText","body","appendChild","boundingRect","getBoundingClientRect","baseRect","marginLeft","marginRight","marginTop","marginBottom","window","getComputedStyle","marginH","parseInt","marginV","left","top","width","right","height","bottom","widthM","heightM","getAbsoluteSize","scrollWidth","scrollHeight","styleEdges","styleBorderRadiuses","reStyleSkipKey","reStyleSkipRule","props","fixed","i","length","prop","styleLen","val","test","indexOf","suffix","replace","j","subProp","val1","val2","split","filter","join","zIndexPositions","getMaxZIndex","elStart","maxIndex","position","zIndex","zIndexNum","Number","includes","parentNode","normalizeElements","opts","from","to","normalizeOptions","options","duration","onEnd","waitFor","isNaN","easing","delay","fill","useCSS","hideFromClone","keepToClone","tween","tweenFromOpacity","parseFloat","tweenToOpacity","getElement","element","type","querySelector","isValidElement","ownerDocument","morph","_options","cancel","cancelStatus","endElementTo","elements","elFrom","qMorphCancel","animationFromClone","animationFromTween","animationToClone","animationTo","elFromParent","elFromNext","nextElementSibling","elFromPosition","elFromParentWidthBefore","elFromParentHeightBefore","borderWidth","elFromBorderWidth","borderStyle","elFromBorderStyle","borderColor","elFromBorderColor","borderRadius","elFromBorderRadius","backgroundColor","elFromBackground","transform","elFromTransform","elFromPositioningType","elFromCssText","elFromClassSaved","classList","toString","elFromStyleSaved","elFromClone","cloneNode","elFromTween","className","c","add","setAttribute","transition","animation","pointerEvents","insertBefore","remove","calculateFinalState","elTo","elFromParentWidthAfter","elFromParentHeightAfter","elToParentWidthBefore","elToParentHeightBefore","animate","innerHTML","elToParent","elToParentWidthAfter","elToParentHeightAfter","elToClone","elToNext","elToBorderWidth","elToBorderStyle","elToBorderColor","elToBorderRadius","elToBackground","elToTransform","elToPositioningType","elToCssText","elToClassSaved","elToStyleSaved","elToPosition","deltaX","deltaY","scaleX","scaleY","elFromParentWidthDiff","elFromParentHeightDiff","elToParentWidthDiff","elToParentHeightDiff","elFromCloneWidth","Math","max","elFromCloneHeight","elToCloneWidth","elToCloneHeight","elSharedSize","elToNeedsFixedPosition","parent","display","flex","opacity","minWidth","maxWidth","minHeight","maxHeight","classes","elFromZIndex","elToZIndex","documentScroll","documentElement","scrollLeft","scrollTop","margin","overflow","overflowX","overflowY","commonCleanup","aborted","resizeFrom","resizeTo","resizeFromTween","resizeToTween","tweenFrom","tweenTo","transformOrigin","cleanup","abort","removeEventListener","addEventListener","reverse","qAnimId","keyframesFromTween","keyframesFrom","keyframeToStart","keyframesTo","head","animationDirection","evt","Object","animationName","then","delayPromise","Promise","resolve","setTimeout","timer","endFn","ev","clearTimeout","catch","onToggle","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { isObject } from './private/is'\n\nlet id = 0\nlet offsetBase = void 0\n\nfunction getAbsolutePosition (el, resize) {\n  if (offsetBase === void 0) {\n    offsetBase = document.createElement('div')\n    offsetBase.style.cssText = 'position: absolute; left: 0; top: 0'\n    document.body.appendChild(offsetBase)\n  }\n\n  const boundingRect = el.getBoundingClientRect()\n  const baseRect = offsetBase.getBoundingClientRect()\n  const { marginLeft, marginRight, marginTop, marginBottom } = window.getComputedStyle(el)\n  const marginH = parseInt(marginLeft, 10) + parseInt(marginRight, 10)\n  const marginV = parseInt(marginTop, 10) + parseInt(marginBottom, 10)\n\n  return {\n    left: boundingRect.left - baseRect.left,\n    top: boundingRect.top - baseRect.top,\n    width: boundingRect.right - boundingRect.left,\n    height: boundingRect.bottom - boundingRect.top,\n    widthM: boundingRect.right - boundingRect.left + (resize === true ? 0 : marginH),\n    heightM: boundingRect.bottom - boundingRect.top + (resize === true ? 0 : marginV),\n    marginH: resize === true ? marginH : 0,\n    marginV: resize === true ? marginV : 0\n  }\n}\n\nfunction getAbsoluteSize (el) {\n  return {\n    width: el.scrollWidth,\n    height: el.scrollHeight\n  }\n}\n\n// firefox rulez\nconst styleEdges = [ 'Top', 'Right', 'Bottom', 'Left' ]\nconst styleBorderRadiuses = [ 'borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius' ]\nconst reStyleSkipKey = /-block|-inline|block-|inline-/\nconst reStyleSkipRule = /(-block|-inline|block-|inline-).*:/\n\nfunction getComputedStyle (el, props) {\n  const style = window.getComputedStyle(el)\n  const fixed = {}\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[ i ]\n\n    if (style[ prop ] === '') {\n      if (prop === 'cssText') {\n        const styleLen = style.length\n        let val = ''\n\n        for (let i = 0; i < styleLen; i++) {\n          if (reStyleSkipKey.test(style[ i ]) !== true) {\n            val += style[ i ] + ': ' + style[ style[ i ] ] + '; '\n          }\n        }\n\n        fixed[ prop ] = val\n      }\n      else if ([ 'borderWidth', 'borderStyle', 'borderColor' ].indexOf(prop) > -1) {\n        const suffix = prop.replace('border', '')\n        let val = ''\n        for (let j = 0; j < styleEdges.length; j++) {\n          const subProp = 'border' + styleEdges[ j ] + suffix\n          val += style[ subProp ] + ' '\n        }\n        fixed[ prop ] = val\n      }\n      else if (prop === 'borderRadius') {\n        let val1 = ''\n        let val2 = ''\n        for (let j = 0; j < styleBorderRadiuses.length; j++) {\n          const val = style[ styleBorderRadiuses[ j ] ].split(' ')\n          val1 += val[ 0 ] + ' '\n          val2 += (val[ 1 ] === void 0 ? val[ 0 ] : val[ 1 ]) + ' '\n        }\n        fixed[ prop ] = val1 + '/ ' + val2\n      }\n      else {\n        fixed[ prop ] = style[ prop ]\n      }\n    }\n    else {\n      if (prop === 'cssText') {\n        fixed[ prop ] = style[ prop ]\n          .split(';')\n          .filter(val => reStyleSkipRule.test(val) !== true)\n          .join(';')\n      }\n      else {\n        fixed[ prop ] = style[ prop ]\n      }\n    }\n  }\n\n  return fixed\n}\n\nconst zIndexPositions = [ 'absolute', 'fixed', 'relative', 'sticky' ]\n\nfunction getMaxZIndex (elStart) {\n  let el = elStart\n  let maxIndex = 0\n\n  while (el !== null && el !== document) {\n    const { position, zIndex } = window.getComputedStyle(el)\n    const zIndexNum = Number(zIndex)\n\n    if (\n      zIndexNum > maxIndex\n      && (el === elStart || zIndexPositions.includes(position) === true)\n    ) {\n      maxIndex = zIndexNum\n    }\n\n    el = el.parentNode\n  }\n\n  return maxIndex\n}\n\nfunction normalizeElements (opts) {\n  return {\n    from: opts.from,\n    to: opts.to !== void 0\n      ? opts.to\n      : opts.from\n  }\n}\n\nfunction normalizeOptions (options) {\n  if (typeof options === 'number') {\n    options = {\n      duration: options\n    }\n  }\n  else if (typeof options === 'function') {\n    options = {\n      onEnd: options\n    }\n  }\n\n  return {\n    ...options,\n\n    waitFor: options.waitFor === void 0 ? 0 : options.waitFor,\n\n    duration: isNaN(options.duration) === true ? 300 : parseInt(options.duration, 10),\n    easing: typeof options.easing === 'string' && options.easing.length > 0 ? options.easing : 'ease-in-out',\n    delay: isNaN(options.delay) === true ? 0 : parseInt(options.delay, 10),\n    fill: typeof options.fill === 'string' && options.fill.length > 0 ? options.fill : 'none',\n\n    resize: options.resize === true,\n    useCSS: options.useCSS === true,\n    hideFromClone: options.hideFromClone === true,\n    keepToClone: options.keepToClone === true,\n\n    tween: options.tween === true,\n    tweenFromOpacity: isNaN(options.tweenFromOpacity) === true ? 0.6 : parseFloat(options.tweenFromOpacity),\n    tweenToOpacity: isNaN(options.tweenToOpacity) === true ? 0.5 : parseFloat(options.tweenToOpacity)\n  }\n}\n\nfunction getElement (element) {\n  const type = typeof element\n\n  return type === 'function'\n    ? element()\n    : (\n        type === 'string'\n          ? document.querySelector(element)\n          : element\n      )\n}\n\nfunction isValidElement (element) {\n  return element\n    && element.ownerDocument === document\n    && element.parentNode !== null\n}\n\nexport default function morph (_options) {\n  let cancel = () => false\n  let cancelStatus = false\n  let endElementTo = true\n\n  const elements = normalizeElements(_options)\n  const options = normalizeOptions(_options)\n\n  const elFrom = getElement(elements.from)\n  if (isValidElement(elFrom) !== true) {\n    // we return a cancel function that return false, meaning the cancel function failed\n    return cancel\n  }\n  // we clean other morphs running on this element\n  typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel()\n\n  let animationFromClone = void 0\n  let animationFromTween = void 0\n  let animationToClone = void 0\n  let animationTo = void 0\n\n  const elFromParent = elFrom.parentNode\n  const elFromNext = elFrom.nextElementSibling\n\n  // we get the dimensions and characteristics\n  // of the parent of the initial element before changes\n  const elFromPosition = getAbsolutePosition(elFrom, options.resize)\n  const {\n    width: elFromParentWidthBefore,\n    height: elFromParentHeightBefore\n  } = getAbsoluteSize(elFromParent)\n  const {\n    borderWidth: elFromBorderWidth,\n    borderStyle: elFromBorderStyle,\n    borderColor: elFromBorderColor,\n    borderRadius: elFromBorderRadius,\n    backgroundColor: elFromBackground,\n    transform: elFromTransform,\n    position: elFromPositioningType,\n    cssText: elFromCssText\n  } = getComputedStyle(elFrom, [ 'borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText' ])\n  const elFromClassSaved = elFrom.classList.toString()\n  const elFromStyleSaved = elFrom.style.cssText\n\n  // we make a clone of the initial element and\n  // use it to display until the final element is ready\n  // and to change the occupied space during animation\n  const elFromClone = elFrom.cloneNode(true)\n  const elFromTween = options.tween === true ? elFrom.cloneNode(true) : void 0\n\n  if (elFromTween !== void 0) {\n    elFromTween.className = elFromTween.classList.toString().split(' ').filter(c => /^bg-/.test(c) === false).join(' ')\n  }\n\n  // if the initial element is not going to be removed do not show the placeholder\n  options.hideFromClone === true && elFromClone.classList.add('q-morph--internal')\n\n  // prevent interaction with placeholder\n  elFromClone.setAttribute('aria-hidden', 'true')\n  elFromClone.style.transition = 'none'\n  elFromClone.style.animation = 'none'\n  elFromClone.style.pointerEvents = 'none'\n  elFromParent.insertBefore(elFromClone, elFromNext)\n\n  // we mark the element with its cleanup function\n  elFrom.qMorphCancel = () => {\n    cancelStatus = true\n\n    // we clean the clone of the initial element\n    elFromClone.remove()\n    elFromTween !== void 0 && elFromTween.remove()\n\n    options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal')\n\n    // we remove the cleanup function from the element\n    elFrom.qMorphCancel = void 0\n  }\n\n  // will be called after Vue catches up with the changes done by _options.onToggle() function\n  const calculateFinalState = () => {\n    const elTo = getElement(elements.to)\n    if (cancelStatus === true || isValidElement(elTo) !== true) {\n      typeof elFrom.qMorphCancel === 'function' && elFrom.qMorphCancel()\n\n      return\n    }\n    // we clean other morphs running on this element\n    elFrom !== elTo && typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n\n    // we hide the final element and the clone of the initial element\n    // we don't hide the final element if we want both it and the animated one visible\n    options.keepToClone !== true && elTo.classList.add('q-morph--internal')\n    elFromClone.classList.add('q-morph--internal')\n\n    // we get the dimensions of the parent of the initial element after changes\n    // the difference is how much we should animate the clone\n    const {\n      width: elFromParentWidthAfter,\n      height: elFromParentHeightAfter\n    } = getAbsoluteSize(elFromParent)\n\n    // we get the dimensions of the parent of the final element before changes\n    const {\n      width: elToParentWidthBefore,\n      height: elToParentHeightBefore\n    } = getAbsoluteSize(elTo.parentNode)\n\n    // then we show the clone of the initial element if we don't want it hidden\n    options.hideFromClone !== true && elFromClone.classList.remove('q-morph--internal')\n\n    // we mark the element with its cleanup function\n    elTo.qMorphCancel = () => {\n      cancelStatus = true\n\n      // we clean the clone of the initial element\n      elFromClone.remove()\n      elFromTween !== void 0 && elFromTween.remove()\n\n      options.hideFromClone === true && elFromClone.classList.remove('q-morph--internal')\n\n      // we show the final element\n      options.keepToClone !== true && elTo.classList.remove('q-morph--internal')\n\n      // we remove the cleanup function from the elements\n      elFrom.qMorphCancel = void 0\n      elTo.qMorphCancel = void 0\n    }\n\n    // will be called after waitFor (give time to render the final element)\n    const animate = () => {\n      if (cancelStatus === true) {\n        typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n\n        return\n      }\n\n      // now the animation starts, so we only need the clone\n      // of the initial element as a spacer\n      // we also hide it to calculate the dimensions of the\n      // parent of the final element after the changes\n      if (options.hideFromClone !== true) {\n        elFromClone.classList.add('q-morph--internal')\n        elFromClone.innerHTML = ''\n        elFromClone.style.left = 0\n        elFromClone.style.right = 'unset'\n        elFromClone.style.top = 0\n        elFromClone.style.bottom = 'unset'\n        elFromClone.style.transform = 'none'\n      }\n\n      // we show the final element\n      if (options.keepToClone !== true) {\n        elTo.classList.remove('q-morph--internal')\n      }\n\n      // we get the dimensions of the parent of the final element after changes\n      // the difference is how much we should animate the clone\n      const elToParent = elTo.parentNode\n      const {\n        width: elToParentWidthAfter,\n        height: elToParentHeightAfter\n      } = getAbsoluteSize(elToParent)\n\n      const elToClone = elTo.cloneNode(options.keepToClone)\n      elToClone.setAttribute('aria-hidden', 'true')\n      if (options.keepToClone !== true) {\n        elToClone.style.left = 0\n        elToClone.style.right = 'unset'\n        elToClone.style.top = 0\n        elToClone.style.bottom = 'unset'\n        elToClone.style.transform = 'none'\n        elToClone.style.pointerEvents = 'none'\n      }\n      elToClone.classList.add('q-morph--internal')\n\n      // if elFrom is the same as elTo the next element is elFromClone\n      const elToNext = elTo === elFrom && elFromParent === elToParent ? elFromClone : elTo.nextElementSibling\n      elToParent.insertBefore(elToClone, elToNext)\n\n      const {\n        borderWidth: elToBorderWidth,\n        borderStyle: elToBorderStyle,\n        borderColor: elToBorderColor,\n        borderRadius: elToBorderRadius,\n        backgroundColor: elToBackground,\n        transform: elToTransform,\n        position: elToPositioningType,\n        cssText: elToCssText\n      } = getComputedStyle(elTo, [ 'borderWidth', 'borderStyle', 'borderColor', 'borderRadius', 'backgroundColor', 'transform', 'position', 'cssText' ])\n      const elToClassSaved = elTo.classList.toString()\n      const elToStyleSaved = elTo.style.cssText\n\n      // we set the computed styles on the element (to be able to remove classes)\n      elTo.style.cssText = elToCssText\n      elTo.style.transform = 'none'\n      elTo.style.animation = 'none'\n      elTo.style.transition = 'none'\n      // we strip the background classes (background color can no longer be animated if !important is used)\n      elTo.className = elToClassSaved.split(' ').filter(c => /^bg-/.test(c) === false).join(' ')\n\n      const elToPosition = getAbsolutePosition(elTo, options.resize)\n\n      const deltaX = elFromPosition.left - elToPosition.left\n      const deltaY = elFromPosition.top - elToPosition.top\n      const scaleX = elFromPosition.width / (elToPosition.width > 0 ? elToPosition.width : 10)\n      const scaleY = elFromPosition.height / (elToPosition.height > 0 ? elToPosition.height : 100)\n\n      const elFromParentWidthDiff = elFromParentWidthBefore - elFromParentWidthAfter\n      const elFromParentHeightDiff = elFromParentHeightBefore - elFromParentHeightAfter\n      const elToParentWidthDiff = elToParentWidthAfter - elToParentWidthBefore\n      const elToParentHeightDiff = elToParentHeightAfter - elToParentHeightBefore\n\n      const elFromCloneWidth = Math.max(elFromPosition.widthM, elFromParentWidthDiff)\n      const elFromCloneHeight = Math.max(elFromPosition.heightM, elFromParentHeightDiff)\n      const elToCloneWidth = Math.max(elToPosition.widthM, elToParentWidthDiff)\n      const elToCloneHeight = Math.max(elToPosition.heightM, elToParentHeightDiff)\n\n      const elSharedSize = elFrom === elTo\n        && [ 'absolute', 'fixed' ].includes(elToPositioningType) === false\n        && [ 'absolute', 'fixed' ].includes(elFromPositioningType) === false\n\n      // if the final element has fixed position or if a parent\n      // has fixed position we need to animate it as fixed\n      let elToNeedsFixedPosition = elToPositioningType === 'fixed'\n      let parent = elToParent\n      while (elToNeedsFixedPosition !== true && parent !== document) {\n        elToNeedsFixedPosition = window.getComputedStyle(parent).position === 'fixed'\n        parent = parent.parentNode\n      }\n\n      // we show the spacer for the initial element\n      if (options.hideFromClone !== true) {\n        elFromClone.style.display = 'block'\n        elFromClone.style.flex = '0 0 auto'\n        elFromClone.style.opacity = 0\n        elFromClone.style.minWidth = 'unset'\n        elFromClone.style.maxWidth = 'unset'\n        elFromClone.style.minHeight = 'unset'\n        elFromClone.style.maxHeight = 'unset'\n        elFromClone.classList.remove('q-morph--internal')\n      }\n\n      // we show the spacer for the final element\n      if (options.keepToClone !== true) {\n        elToClone.style.display = 'block'\n        elToClone.style.flex = '0 0 auto'\n        elToClone.style.opacity = 0\n        elToClone.style.minWidth = 'unset'\n        elToClone.style.maxWidth = 'unset'\n        elToClone.style.minHeight = 'unset'\n        elToClone.style.maxHeight = 'unset'\n      }\n      elToClone.classList.remove('q-morph--internal')\n\n      // we apply classes specified by user\n      if (typeof options.classes === 'string') {\n        elTo.className += ' ' + options.classes\n      }\n\n      // we apply styles specified by user\n      if (typeof options.style === 'string') {\n        elTo.style.cssText += ' ' + options.style\n      }\n      else if (isObject(options.style) === true) {\n        for (const prop in options.style) {\n          elTo.style[ prop ] = options.style[ prop ]\n        }\n      }\n\n      const elFromZIndex = getMaxZIndex(elFromClone)\n      const elToZIndex = getMaxZIndex(elTo)\n\n      // we position the morphing element\n      // if we use fixed position for the final element we need to adjust for scroll\n      const documentScroll = elToNeedsFixedPosition === true\n        ? document.documentElement\n        : { scrollLeft: 0, scrollTop: 0 }\n      elTo.style.position = elToNeedsFixedPosition === true ? 'fixed' : 'absolute'\n      elTo.style.left = `${ elToPosition.left - documentScroll.scrollLeft }px`\n      elTo.style.right = 'unset'\n      elTo.style.top = `${ elToPosition.top - documentScroll.scrollTop }px`\n      elTo.style.margin = 0\n\n      if (options.resize === true) {\n        elTo.style.minWidth = 'unset'\n        elTo.style.maxWidth = 'unset'\n        elTo.style.minHeight = 'unset'\n        elTo.style.maxHeight = 'unset'\n        elTo.style.overflow = 'hidden'\n        elTo.style.overflowX = 'hidden'\n        elTo.style.overflowY = 'hidden'\n      }\n\n      document.body.appendChild(elTo)\n\n      if (elFromTween !== void 0) {\n        elFromTween.style.cssText = elFromCssText\n        elFromTween.style.transform = 'none'\n        elFromTween.style.animation = 'none'\n        elFromTween.style.transition = 'none'\n\n        elFromTween.style.position = elTo.style.position\n        elFromTween.style.left = `${ elFromPosition.left - documentScroll.scrollLeft }px`\n        elFromTween.style.right = 'unset'\n        elFromTween.style.top = `${ elFromPosition.top - documentScroll.scrollTop }px`\n        elFromTween.style.margin = 0\n        elFromTween.style.pointerEvents = 'none'\n\n        if (options.resize === true) {\n          elFromTween.style.minWidth = 'unset'\n          elFromTween.style.maxWidth = 'unset'\n          elFromTween.style.minHeight = 'unset'\n          elFromTween.style.maxHeight = 'unset'\n          elFromTween.style.overflow = 'hidden'\n          elFromTween.style.overflowX = 'hidden'\n          elFromTween.style.overflowY = 'hidden'\n        }\n\n        document.body.appendChild(elFromTween)\n      }\n\n      const commonCleanup = aborted => {\n        // we put the element back in it's place\n        // and restore the styles and classes\n        if (elFrom === elTo && endElementTo !== true) {\n          elTo.style.cssText = elFromStyleSaved\n          elTo.className = elFromClassSaved\n        }\n        else {\n          elTo.style.cssText = elToStyleSaved\n          elTo.className = elToClassSaved\n        }\n        elToClone.parentNode === elToParent && elToParent.insertBefore(elTo, elToClone)\n\n        // we clean the spacers\n        elFromClone.remove()\n        elToClone.remove()\n        elFromTween !== void 0 && elFromTween.remove()\n\n        // cancel will be no longer available\n        cancel = () => false\n\n        elFrom.qMorphCancel = void 0\n        elTo.qMorphCancel = void 0\n\n        // we are ready\n        if (typeof options.onEnd === 'function') {\n          options.onEnd(endElementTo === true ? 'to' : 'from', aborted === true)\n        }\n      }\n\n      if (options.useCSS !== true && typeof elTo.animate === 'function') {\n        const resizeFrom = options.resize === true\n          ? {\n              transform: `translate(${ deltaX }px, ${ deltaY }px)`,\n              width: `${ elFromCloneWidth }px`,\n              height: `${ elFromCloneHeight }px`\n            }\n          : {\n              transform: `translate(${ deltaX }px, ${ deltaY }px) scale(${ scaleX }, ${ scaleY })`\n            }\n        const resizeTo = options.resize === true\n          ? {\n              width: `${ elToCloneWidth }px`,\n              height: `${ elToCloneHeight }px`\n            }\n          : {}\n        const resizeFromTween = options.resize === true\n          ? {\n              width: `${ elFromCloneWidth }px`,\n              height: `${ elFromCloneHeight }px`\n            }\n          : {}\n        const resizeToTween = options.resize === true\n          ? {\n              transform: `translate(${ -1 * deltaX }px, ${ -1 * deltaY }px)`,\n              width: `${ elToCloneWidth }px`,\n              height: `${ elToCloneHeight }px`\n            }\n          : {\n              transform: `translate(${ -1 * deltaX }px, ${ -1 * deltaY }px) scale(${ 1 / scaleX }, ${ 1 / scaleY })`\n            }\n        const tweenFrom = elFromTween !== void 0\n          ? { opacity: options.tweenToOpacity }\n          : { backgroundColor: elFromBackground }\n        const tweenTo = elFromTween !== void 0\n          ? { opacity: 1 }\n          : { backgroundColor: elToBackground }\n        animationTo = elTo.animate([\n          {\n            margin: 0,\n            borderWidth: elFromBorderWidth,\n            borderStyle: elFromBorderStyle,\n            borderColor: elFromBorderColor,\n            borderRadius: elFromBorderRadius,\n            zIndex: elFromZIndex,\n            transformOrigin: '0 0',\n            ...resizeFrom,\n            ...tweenFrom\n          },\n          {\n            margin: 0,\n            borderWidth: elToBorderWidth,\n            borderStyle: elToBorderStyle,\n            borderColor: elToBorderColor,\n            borderRadius: elToBorderRadius,\n            zIndex: elToZIndex,\n            transformOrigin: '0 0',\n            transform: elToTransform,\n            ...resizeTo,\n            ...tweenTo\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationFromTween = elFromTween === void 0 ? void 0 : elFromTween.animate([\n          {\n            opacity: options.tweenFromOpacity,\n            margin: 0,\n            borderWidth: elFromBorderWidth,\n            borderStyle: elFromBorderStyle,\n            borderColor: elFromBorderColor,\n            borderRadius: elFromBorderRadius,\n            zIndex: elFromZIndex,\n            transformOrigin: '0 0',\n            transform: elFromTransform,\n            ...resizeFromTween\n          },\n          {\n            opacity: 0,\n            margin: 0,\n            borderWidth: elToBorderWidth,\n            borderStyle: elToBorderStyle,\n            borderColor: elToBorderColor,\n            borderRadius: elToBorderRadius,\n            zIndex: elToZIndex,\n            transformOrigin: '0 0',\n            ...resizeToTween\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationFromClone = options.hideFromClone === true || elSharedSize === true ? void 0 : elFromClone.animate([\n          {\n            margin: `${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px`,\n            width: `${ elFromCloneWidth + elFromPosition.marginH }px`,\n            height: `${ elFromCloneHeight + elFromPosition.marginV }px`\n          },\n          {\n            margin: 0,\n            width: 0,\n            height: 0\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        animationToClone = options.keepToClone === true ? void 0 : elToClone.animate([\n          elSharedSize === true\n            ? {\n                margin: `${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px`,\n                width: `${ elFromCloneWidth + elFromPosition.marginH }px`,\n                height: `${ elFromCloneHeight + elFromPosition.marginV }px`\n              }\n            : {\n                margin: 0,\n                width: 0,\n                height: 0\n              },\n          {\n            margin: `${ elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0 }px ${ elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0 }px`,\n            width: `${ elToCloneWidth + elToPosition.marginH }px`,\n            height: `${ elToCloneHeight + elToPosition.marginV }px`\n          }\n        ], {\n          duration: options.duration,\n          easing: options.easing,\n          fill: options.fill,\n          delay: options.delay\n        })\n\n        const cleanup = abort => {\n          animationFromClone !== void 0 && animationFromClone.cancel()\n          animationFromTween !== void 0 && animationFromTween.cancel()\n          animationToClone !== void 0 && animationToClone.cancel()\n          animationTo.cancel()\n\n          animationTo.removeEventListener('finish', cleanup)\n          animationTo.removeEventListener('cancel', cleanup)\n\n          commonCleanup(abort)\n\n          // we clean the animations\n          animationFromClone = void 0\n          animationFromTween = void 0\n          animationToClone = void 0\n          animationTo = void 0\n        }\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n\n        animationTo.addEventListener('finish', cleanup)\n        animationTo.addEventListener('cancel', cleanup)\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || animationTo === void 0) {\n            return false\n          }\n\n          if (abort === true) {\n            cleanup(true)\n            return true\n          }\n\n          endElementTo = endElementTo !== true\n\n          animationFromClone !== void 0 && animationFromClone.reverse()\n          animationFromTween !== void 0 && animationFromTween.reverse()\n          animationToClone !== void 0 && animationToClone.reverse()\n          animationTo.reverse()\n\n          return true\n        }\n      }\n      else {\n        const qAnimId = `q-morph-anim-${ ++id }`\n        const style = document.createElement('style')\n        const resizeFrom = options.resize === true\n          ? `\n            transform: translate(${ deltaX }px, ${ deltaY }px);\n            width: ${ elFromCloneWidth }px;\n            height: ${ elFromCloneHeight }px;\n          `\n          : `transform: translate(${ deltaX }px, ${ deltaY }px) scale(${ scaleX }, ${ scaleY });`\n        const resizeTo = options.resize === true\n          ? `\n            width: ${ elToCloneWidth }px;\n            height: ${ elToCloneHeight }px;\n          `\n          : ''\n        const resizeFromTween = options.resize === true\n          ? `\n            width: ${ elFromCloneWidth }px;\n            height: ${ elFromCloneHeight }px;\n          `\n          : ''\n        const resizeToTween = options.resize === true\n          ? `\n            transform: translate(${ -1 * deltaX }px, ${ -1 * deltaY }px);\n            width: ${ elToCloneWidth }px;\n            height: ${ elToCloneHeight }px;\n          `\n          : `transform: translate(${ -1 * deltaX }px, ${ -1 * deltaY }px) scale(${ 1 / scaleX }, ${ 1 / scaleY });`\n        const tweenFrom = elFromTween !== void 0\n          ? `opacity: ${ options.tweenToOpacity };`\n          : `background-color: ${ elFromBackground };`\n        const tweenTo = elFromTween !== void 0\n          ? 'opacity: 1;'\n          : `background-color: ${ elToBackground };`\n        const keyframesFromTween = elFromTween === void 0\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-from-tween {\n              0% {\n                opacity: ${ options.tweenFromOpacity };\n                margin: 0;\n                border-width: ${ elFromBorderWidth };\n                border-style: ${ elFromBorderStyle };\n                border-color: ${ elFromBorderColor };\n                border-radius: ${ elFromBorderRadius };\n                z-index: ${ elFromZIndex };\n                transform-origin: 0 0;\n                transform: ${ elFromTransform };\n                ${ resizeFromTween }\n              }\n\n              100% {\n                opacity: 0;\n                margin: 0;\n                border-width: ${ elToBorderWidth };\n                border-style: ${ elToBorderStyle };\n                border-color: ${ elToBorderColor };\n                border-radius: ${ elToBorderRadius };\n                z-index: ${ elToZIndex };\n                transform-origin: 0 0;\n                ${ resizeToTween }\n              }\n            }\n          `\n        const keyframesFrom = options.hideFromClone === true || elSharedSize === true\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-from {\n              0% {\n                margin: ${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px;\n                width: ${ elFromCloneWidth + elFromPosition.marginH }px;\n                height: ${ elFromCloneHeight + elFromPosition.marginV }px;\n              }\n\n              100% {\n                margin: 0;\n                width: 0;\n                height: 0;\n              }\n            }\n          `\n        const keyframeToStart = elSharedSize === true\n          ? `\n            margin: ${ elFromParentHeightDiff < 0 ? elFromParentHeightDiff / 2 : 0 }px ${ elFromParentWidthDiff < 0 ? elFromParentWidthDiff / 2 : 0 }px;\n            width: ${ elFromCloneWidth + elFromPosition.marginH }px;\n            height: ${ elFromCloneHeight + elFromPosition.marginV }px;\n          `\n          : `\n            margin: 0;\n            width: 0;\n            height: 0;\n          `\n        const keyframesTo = options.keepToClone === true\n          ? ''\n          : `\n            @keyframes ${ qAnimId }-to {\n              0% {\n                ${ keyframeToStart }\n              }\n\n              100% {\n                margin: ${ elToParentHeightDiff < 0 ? elToParentHeightDiff / 2 : 0 }px ${ elToParentWidthDiff < 0 ? elToParentWidthDiff / 2 : 0 }px;\n                width: ${ elToCloneWidth + elToPosition.marginH }px;\n                height: ${ elToCloneHeight + elToPosition.marginV }px;\n              }\n            }\n          `\n        style.innerHTML = `\n          @keyframes ${ qAnimId } {\n            0% {\n              margin: 0;\n              border-width: ${ elFromBorderWidth };\n              border-style: ${ elFromBorderStyle };\n              border-color: ${ elFromBorderColor };\n              border-radius: ${ elFromBorderRadius };\n              background-color: ${ elFromBackground };\n              z-index: ${ elFromZIndex };\n              transform-origin: 0 0;\n              ${ resizeFrom }\n              ${ tweenFrom }\n            }\n\n            100% {\n              margin: 0;\n              border-width: ${ elToBorderWidth };\n              border-style: ${ elToBorderStyle };\n              border-color: ${ elToBorderColor };\n              border-radius: ${ elToBorderRadius };\n              background-color: ${ elToBackground };\n              z-index: ${ elToZIndex };\n              transform-origin: 0 0;\n              transform: ${ elToTransform };\n              ${ resizeTo }\n              ${ tweenTo }\n            }\n          }\n\n          ${ keyframesFrom }\n\n          ${ keyframesFromTween }\n\n          ${ keyframesTo }\n        `\n        document.head.appendChild(style)\n\n        let animationDirection = 'normal'\n\n        elFromClone.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-from`\n        if (elFromTween !== void 0) {\n          elFromTween.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-from-tween`\n        }\n        elToClone.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }-to`\n        elTo.style.animation = `${ options.duration }ms ${ options.easing } ${ options.delay }ms ${ animationDirection } ${ options.fill } ${ qAnimId }`\n\n        const cleanup = evt => {\n          if (evt === Object(evt) && evt.animationName !== qAnimId) {\n            return\n          }\n\n          elTo.removeEventListener('animationend', cleanup)\n          elTo.removeEventListener('animationcancel', cleanup)\n\n          commonCleanup()\n\n          // we clean the animations\n          style.remove()\n        }\n\n        elFrom.qMorphCancel = () => {\n          elFrom.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n        elTo.qMorphCancel = () => {\n          elTo.qMorphCancel = void 0\n          cancelStatus = true\n          cleanup()\n        }\n\n        elTo.addEventListener('animationend', cleanup)\n        elTo.addEventListener('animationcancel', cleanup)\n\n        cancel = abort => {\n          // we are not in a morph that we can cancel\n          if (cancelStatus === true || !elTo || !elFromClone || !elToClone) {\n            return false\n          }\n\n          if (abort === true) {\n            cleanup()\n\n            return true\n          }\n\n          endElementTo = endElementTo !== true\n\n          animationDirection = animationDirection === 'normal' ? 'reverse' : 'normal'\n\n          elFromClone.style.animationDirection = animationDirection\n          elFromTween.style.animationDirection = animationDirection\n          elToClone.style.animationDirection = animationDirection\n          elTo.style.animationDirection = animationDirection\n\n          return true\n        }\n      }\n    }\n\n    if (\n      options.waitFor > 0\n      || options.waitFor === 'transitionend'\n      || (options.waitFor === Object(options.waitFor) && typeof options.waitFor.then === 'function')\n    ) {\n      const delayPromise = options.waitFor > 0\n        ? new Promise(resolve => setTimeout(resolve, options.waitFor))\n        : (\n            options.waitFor === 'transitionend'\n              ? new Promise(resolve => {\n                const timer = setTimeout(() => {\n                  endFn()\n                }, 400)\n\n                const endFn = ev => {\n                  clearTimeout(timer)\n\n                  if (elTo) {\n                    elTo.removeEventListener('transitionend', endFn)\n                    elTo.removeEventListener('transitioncancel', endFn)\n                  }\n\n                  resolve()\n                }\n\n                elTo.addEventListener('transitionend', endFn)\n                elTo.addEventListener('transitioncancel', endFn)\n              })\n              : options.waitFor\n          )\n\n      delayPromise\n        .then(animate)\n        .catch(() => {\n          typeof elTo.qMorphCancel === 'function' && elTo.qMorphCancel()\n        })\n    }\n    else {\n      animate()\n    }\n  }\n\n  typeof _options.onToggle === 'function' && _options.onToggle()\n  requestAnimationFrame(calculateFinalState)\n\n  // we return the cancel function\n  // returns:\n  //   false if the cancel cannot be performed (the morph ended already or has not started)\n  //   true else\n  return abort => cancel(abort)\n}\n"]},"metadata":{},"sourceType":"module"}